<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Untitled RSS Feed]]></title>
        <description><![CDATA[Untitled RSS Feed]]></description>
        <link>https://spion.github.io</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sat, 03 Oct 2015 22:17:34 GMT</lastBuildDate>
        <atom:link href="https://spion.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Sat, 03 Oct 2015 22:17:30 GMT</pubDate>
        <item>
            <title><![CDATA[Intuitive JavaScript array filtering function pt2]]></title>
            <description><![CDATA[<p>Last time I wrote about my JavaScript array filtering function <code>intuitiveFilter</code>. It had one caveat: namely, the way it handles sub-arrays in the data. It doesn&#39;t allow the user to inspect a sub-array without writing a custom filtering function for the sub-array field.</p>
<p>To inspect an array field, one would need a filtering function which takes an array argument and returns true or false. For example, the function might check the contents of the array and see if the elements match certain rules. Depending on the number of elements matching the rules, it would return true or false.</p>
<p>We can already filter the contents of an array with <code>intuitiveFilter</code>. That means we can easily use it to inspect the elements of a sub-array. All we need now is to specify how many results we would like to have. The following rules would be useful:</p>
<ul>
<li>there are exactly N elements satisfying the conditions</li>
<li>there are at least / at most N elements satisfying the conditions</li>
<li>none of the elements satisfy the condition</li>
<li>all of the elements satisfy the conditon</li>
</ul>
<p>Now in order to implement this without modifying the original function, we can use a cool feature of functional languages: a higher order function which returns a function.</p>
<p>Why would we need to return a function?</p>
<p>We left only one extension mechanism for our filter: custom functions for fields. They take the field&#39;s value as an argument. They should return true/false depending on it. We called those basic filter functions.</p>
<p>Because we&#39;ve been given the ability to return a function from another function, we could build a filter function from a rule object and then return it. Lets make a simple example</p>
<pre><code>function has(rules) {
    return function(item) {
        return intuitiveFilter(item, rules).length &gt; 0
    }
}
</code></pre><p>What just happened here? We return a filter function which applies <code>intiuitiveFilter</code> to the array <code>item</code> and checks if it contains at least one element matching the rules. We&#39;ve returned exactly what intuitiveFilter could use - a filter function that takes an array item and returns a boolean. It looks as if we wrote a shorter alias to replace some boilerplate code.</p>
<p>Remember the old way to write an array filter?</p>
<pre><code>intuitiveFilter(arrayArray, {children: function(arr) { 
    return intuitiveFilter(arr, {age:{gt:10}}).length &gt; 0; }
});
</code></pre><p>We can now write it like so:</p>
<pre><code>intuitiveFilter(arrayArray, {children: has({age:{gt:10}})});
</code></pre><p>Isn&#39;t that beautiful? We&#39;ve removed a lot of boilerplate code and the result is elegant and simple. Admittedly, it has a lot of braces and parentheses, but then again, so does Lisp. Now lets see if we can provide a richer set of filtering rules.</p>
<p>Lets start with some intuitive syntax ideas:</p>
<pre><code>checkif(array, [ {has: filter,
    atLeast: 2, atMost:2}, ...]);
</code></pre><p>There are two possible interpretations for the usage of the array here. One of
them would be the equivalent of an <code>or</code> operator. For example,
<code>[{has: {age: {gt:10}}, atLeast:1}, {has: {age: {lt: 8}}, atLeast: 1}]</code> would
mean the following: has at least one child older than 10 or has at least one
child younger than 8. This is consistent with the meaning of arrays as they are
used in intuitiveFilter. However, in this case, the <code>or</code> operator is a lot less
useful to as than the <code>and</code> operator. Using the <code>or</code> operator on a single field
is already possible through intuitiveFilter. Using the <code>and</code> operator isn&#39;t,
even though that would be useful for array fields.</p>
<p>We&#39;re going to break consistency for the sake of completeness. The rule array
argument of <code>checkif</code> will mean <code>and</code> instead of <code>or</code>, which means that all of
the rules must be satisfied. We&#39;re going to have a slightly shaky abstraction
this way, but its going to be a more useful one.</p>
<p>Finally, lets define some shorthand variants:</p>
<p><code>checkif(array, {has: filter, atLeast:2});</code> - if we only need one rule, the
argument can be the rule.</p>
<p><code>checkif(array, {has: filter});</code> - default meaning is &quot;atLeast: 1&quot;</p>
<p><code>checkif(array, {none: filter});</code> - shorthand for exactly: 0</p>
<p><code>checkif(array, {all: filter});</code> - all elements must satisfy the filter</p>
<p>And here is the code:</p>
<pre><code>function checkif(rules) {
    if (!$.isArray(rules)) { rules = [ rules ]; }
    for (var k = 0; k &lt; rules.length; ++k) {
        if (rules[k].has &amp;&amp; !(&quot;atLeast&quot; in rules[k]
                    || &quot;atMost&quot; in rules[k])) {
            rules[k].atLeast = 1;
        }
    }
    var checkLimits = function(filtered, rule) {
        return ((!(&quot;atMost&quot; in rule)
                    || filtered &lt;= rule.atMost)
                &amp;&amp; (!(&quot;atLeast&quot; in rule)
                    || filtered &gt;= rule.atLeast)
                &amp;&amp; (!(&quot;exactly&quot; in rule)
                    || filtered == rule.exactly));
    }
    var checkRule = function(filtered, total, rule) {
        return ((rule.has &amp;&amp; checkLimits(filtered, rule))
                || (rule.none &amp;&amp; !filtered)
                || (rule.all
                    &amp;&amp; filtered == total
                    &amp;&amp; checkLimits(filtered, rule)))

    }
    return function(array) {
        for (var k = 0; k &lt; rules.length; ++k) {
            if (!checkRule(intuitiveFilter(array,
                    rules[k].has ? rules[k].has
                    : rules[k].none ? rules[k].none
                    : rules[k].all).length,
                array.length, rules[k])) return false;
        }
        return true;
    }
}
</code></pre><p>Some fun examples follow:</p>
<pre><code>var testArray = [
    {name:&quot;John&quot;,  age: 40, children: [{name:&quot;Merlin&quot;, age:10}],
  company:{ name: &quot;MegaCorp&quot;, employees: 200}},
    {name:&quot;Sue&quot;,   age: 30, children: [{name:&quot;Paco&quot;, age: 3}],
  company:{ name: &quot;MegaCorp&quot;, employees: 200}},
    {name:&quot;Mary&quot;, age: 55, children: [
        {name:&quot;Joe&quot;, age: 17}, {name:&quot;Moe&quot;, age:19}],
        company:{ name: &quot;MegaCorp&quot;, employees: 200}},
    {name:&quot;Jack&quot;,  age: 20, children: [],
 company:{ name: &quot;MiniCorp&quot;, employees: 100}}
];
console.log(intuitiveFilter(testArray,
    {children: checkif({has: { age: { gt: 5}}, atLeast: 1})}));
    // John, Mary

console.log(intuitiveFilter(testArray,
    {children: checkif({none: { }})})); // Jack

console.log(intuitiveFilter(testArray,
    {children: checkif({all: { age: {gt: 12}}})})); // Jack and Mary&lt;
</code></pre><p>Note: &quot;all&quot; will always return true for empty arrays, as there are no items that
don&#39;t satisfy the imposed conditions. This can be modified by adding
<code>atLeast: 1</code>:</p>
<pre><code>// Just Mary
console.log(intuitiveFilter(testArray,
    {children: checkif({all: { age: {gt: 12}}, atLeast: 1})}));
</code></pre><p>And now we&#39;ve extended our filter language with rich syntax to deal with sub-arrays without touching the original filtering function. Wasn&#39;t that great?</p>
]]></description>
            <link>https://spion.github.io/posts/intuitive-javascript-array-filtering-function-pt2.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/intuitive-javascript-array-filtering-function-pt2.html</guid>
            <pubDate>Thu, 12 Jul 2012 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ES7 async functions - a step in the wrong direction]]></title>
            <description><![CDATA[<p>Async functions are a new feature scheduled to become a part of ES7. They build
on top of previous capabilities made available by ES6 - promises, letting you
write async code as though it were synchronous. At the moment, they&#39;re a
<a href="https://github.com/lukehoban/ecmascript-asyncawait">stage 1 proposal for ES7</a> and supported by babel /
regenerator.</p>
<p>When generator functions were first made available in node, I was
<a href="https://spion.github.io/posts/analysis-generators-and-other-async-patterns-node.html">very exicted</a>. Finally, a way to write asynchronous JavaScript that
doesn&#39;t descend into callback hell! At the time, I was unfamiliar with promises
and the language power you get back by simply having async computations be
first class values, so it seemed to me that generators are the best solution
available.</p>
<p>Turns out, they aren&#39;t. And the same limitations apply for async functions.</p>
<h3 id="predicates-in-catch-statements">Predicates in catch statements</h3>
<p>With generators, thrown errors bubble up the function chain until a catch
statement is encountered, much like in other languages that support exceptions.
On one hand, this is convenient, but on the other, you never know what you&#39;re
catching once you write a catch statement.</p>
<p>JavaScript catch doesn&#39;t support any mechanism to filter errors. This
limitation isn&#39;t too hard to get around: we can write a function <code>guard</code></p>
<pre><code class="lang-js">function guard(e, predicate) {
  if (!predicate(e)) throw e;
}
</code></pre>
<p>and then use it to e.g. only filter &quot;not found&quot; errors when downloading an
image</p>
<pre><code class="lang-js">try {
    await downloadImage(url);
} catch (e) { guard(e, e =&gt; e.code == 404);
    handle404(...);
}
</code></pre>
<p>But that only gets us so far. What if we want to have a second error handler?
We must resort to using <code>if-then-else</code>, making sure that we don&#39;t forget to
rethrow the error at the end</p>
<pre><code class="lang-js">try {
    await downloadImage(url);
} catch (e) {
    if (e.code == 404)  {
        handle404(...)
    } else if (e.code == 401) {
        handle401(...);
    } else {
        throw e;
    }
}
</code></pre>
<p>Since promises are a userland library, restrictions like the above do not
apply. We can write a userland library that demands us to always use a
predicate filter when we invoke the catch method</p>
<pre><code class="lang-js">downloadImage(url)
.catch(e =&gt; e.code == 404, e =&gt; {
    handle404(...);
})
.catch(e =&gt; e.code == 401, e =&gt; {
    handle401(...)
})
</code></pre>
<p>Now if we want all errors to be caught, we have to say it explicitly:</p>
<pre><code class="lang-js">asyncOperation()
.catch(e =&gt; true, e =&gt; {
    handleAllErrors(...)
});
</code></pre>
<p>Since these constructs are not built in language features but a DSL built on
top of higher order functions, we can impose any restrictions that we want
instead of waiting on TC39 to fix the language.</p>
<h3 id="cannot-use-higher-order-functions">Cannot use higher order functions</h3>
<p>Because generators and async-await are shallow, you cannot use <code>yield</code> or
<code>await</code> within lambdas passed to higher order functions.</p>
<p>This is <a href="https://github.com/tc39/ecmascript-asyncawait/issues/7">better explained here</a> - The example given
there is</p>
<pre><code class="lang-js">async function renderChapters(urls) {
  urls.map(getJSON).forEach(j =&gt; addToPage((await j).html));
}
</code></pre>
<p>and will not work, because you&#39;re not allowed to use await from within a nested
function. The following will work, but will execute in parallel:</p>
<pre><code class="lang-js">async function renderChapters(urls) {
  urls.map(getJSON).forEach(async j =&gt; addToPage((await j).html));
}
</code></pre>
<p>To understand why, you need to read <a href="http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/">this article</a>. In short:
its much harder to implement deep coroutines so browser vendors probably wont
do it.</p>
<p>Besides being very unintuitive, this is also limiting. Higher order functions
are succint and powerful, yet we cannot <em>really</em> use them inside async
functions. To get sequential execution we have to resort to the clumsy built
in for loops which often force us into writing ceremonial, stateful code.</p>
<h3 id="arrow-functions-give-us-more-power-than-ever-before">Arrow functions give us more power than ever before</h3>
<p>Functional DSLs were very powerful even before JS had short lambda syntax. But
with arrow functions, things get even cleaner. The amount of code one needs to
write can be reduced greatly thanks to short lambda syntax and higher order
functions. Lets take the motivating example from the async-await proposal</p>
<pre><code class="lang-js">function chainAnimationsPromise(elem, animations) {
    var ret = null;
    var p = currentPromise;
    for(var anim of animations) {
        p = p.then(function(val) {
            ret = val;
            return anim(elem);
        })
    }
    return p.catch(function(e) {
        /* ignore and keep going */
    }).then(function() {
        return ret;
    });
}
</code></pre>
<p>With bluebird&#39;s <code>Promise.reduce</code>, this becomes</p>
<pre><code class="lang-js">function chainAnimationsPromise(elem, animations) {
  return Promise.reduce(animations,
      (lastVal, anim) =&gt; anim(elem).catch(_ =&gt; Promise.reject(lastVal)),
      Promise.resolve(null))
  .catch(lastVal =&gt; lastVal);
}
</code></pre>
<p>In short: functional DSLs are now more powerful than built in constructs,
even though (admittedly) they may take some getting used to.</p>
<hr>
<p>But this is not why async functions are a step in the wrong direction. The
problems above are not unique to async functions. The same problems apply to
generators: async functions merely inherit them as they&#39;re very similar.</p>
<p>Async functions also add a new major problem: loss of generality.</p>
<h2 id="async-functions-another-step-back">Async functions: another step back</h2>
<p>Despite their shortcomings, generator based coroutines have one redeeming
quality: they allow you to redefine the coroutine execution engine. This is
extremely powerful, and I will demonstrate by giving the following example:</p>
<p>Lets say we were given the task to write the save function for an issue
tracker. The issue author can specify the issue&#39;s title and text, as well
as any other issues that are blocking the solution of the newly entered issue.</p>
<p>Our initial implementation is simple:</p>
<pre><code class="lang-js">async function saveIssue(data, blockers) {
    let issue = await Issues.insert(data);
    for (let blockerId of blockers) {
      await BlockerIssues.insert({blocker: blockerId, blocks: issue.id});
    }
}

Issues.insert = async function(data) {
    return db.query(&quot;INSERT ... VALUES&quot;, data).execWithin(db.pool);
}

BlockerIssue.insert = async function(data) {
    return db.query(&quot;INSERT .... VALUES&quot;, data).execWithin(db.pool);
}
</code></pre>
<p><code>Issue</code> and <code>BlockerIssues</code> are references to the corresponding tables in an
SQL database. Their <code>insert</code> methods return a promise that indicate whether
the query has been completed. The query is executed by a connection pool.</p>
<p>But then, we run into a problem. We don&#39;t want to partially save the issue if
some of the data was not inserted successfuly. We want the entire save
operation to be atomic. Fortnuately, SQL databases support this via
transactions, and our database library has a transaction abstraction. So we
change our code:</p>
<pre><code class="lang-js">async function saveIssue(data, blockers) {
    let tx = db.beginTransaction();
    let issue = await Issue.insert(tx, data);
    for (let blockerId of blockers) {
      await BlockerIssues.insert(tx, {blocker: blockerId, blocks: issue.id});
    }
}

Issues.insert = async function(tx, data) {
    return db.query(&quot;INSERT ... VALUES&quot;, data).execWithin(tx);
}

BlockerIssue.insert = async function(tx, data) {
    return db.query(&quot;INSERT .... VALUES&quot;, data).execWithin(tx);
}
</code></pre>
<p>Here, we changed the code in two ways. Firstly, we created a transaction within
the saveIssue function. Secondly, we changed both insert methods to take this
transaction as an argument.</p>
<p>Immediately we can see that this solution doesn&#39;t scale very well. What if
we need to use <code>saveIssue</code> as a part of a larger transaction? Then it has to
take a transaction as an argument. Who will create the transactions? The top
level service. What if the top level service becomes a part of a larger
service? Then we need to change the code again.</p>
<p>We can reduce the extent of this problem by writing a base class that
automatically initializes a transaction if one is not passed via the
constructor, and then have <code>Issues</code>, <code>BlockerIssue</code> etc inherit from this
class.</p>
<pre><code>
class Transactionable {
    constructor(tx) {
        if (tx == null) tx = db.beginTransaction();
    }
}
class IssueService extends Transactionable {
    async saveIssue(data, blockers) {
        issues = new Issues(this.transaction);
        blockerIssues = new BlockerIssues(this.transaction);
        ...
    }
}
class Issues extends Transactionable {
  ...
}
// etc
</code></pre><p>Like many OO solutions, this only spreads the problem across the plate to make
it look smaller but doesn&#39;t solve it.</p>
<h2 id="generators-are-better">Generators are better</h2>
<p>Generators let us define the execution engine. The iteration is driven by the
function that consumes the generator, which decides what to do with the yielded
values. What if instead of only allowing promises, our engine let us also:</p>
<ol>
<li>Specify additional options which are accessible from within</li>
<li>Yield queries. These will be run in the transaction specified in the options
above</li>
<li>Yield other generator iterables: These will be run with the same engine and
options</li>
<li>Yield promises: These will be handled normally</li>
</ol>
<p>Lets take the original code and simplify it:</p>
<pre><code class="lang-js">
function* saveIssue(data, blockers) {
    let issue = yield Issues.insert(data);
    for (var blockerId of blockers) {
      yield BlockerIssues.insert({blocker: blockerId, blocks: issue.id});
    }
}

function* (data) {
    return db.query(&quot;INSERT ... VALUES&quot;, data)
}

BlockerIssue.insert = function* (data) {
    return db.query(&quot;INSERT .... VALUES&quot;, data)
}
</code></pre>
<p>From our http handler, we can now write</p>
<pre><code class="lang-js">var myengine = require(&#39;./my-engine&#39;);

app.post(&#39;/issues/save&#39;, function(req, res) {
  myengine.run(saveIssue(data, blockers), {tx: db.beginTransaction()})
});
</code></pre>
<p>Lets implement this engine:</p>
<pre><code class="lang-js">function run(iterator, options) {
    function runNext(value) {
        var request = iterator.next(value)
        if (isIterator(request)) run(request, options).then(runNext)
        else if (isQuery(request)) request.execWithin(options.tx).then(runNext)
        else if (isPromise(request)) promise.then(runNext);
    }
    runNext()
}
</code></pre>
<p>This implementation is incomplete because it lacks error handling. Still, its
quite easy to write a complete one using bluebird&#39;s <code>Promise.coroutine</code>,
which <a href="https://github.com/petkaantonov/bluebird/issues/735#issuecomment-133699326">lets you specify a custom yield handler</a></p>
<p>The best part of this change is that we did not have to change the original
code at all. We didn&#39;t have to add the transaction parameter to every function,
to take care to properly propagate it everywhere and to properly create those
transactions. All we needed to do is just change our execution engine.</p>
<p>And we can add so much more! We can <code>yield</code> a request to get the current user
if any, so we don&#39;t have to thread that throughout our code either. Infact, we
can implement <a href="https://github.com/othiym23/node-continuation-local-storage">continuation local storage</a> with only a few lines of code.</p>
<blockquote>
<p>What about async generators? Surely thats not possible with just generators,
as you would need both yield and await at the same time</p>
</blockquote>
<p>Yes, thats possible too. Here is a very simple proof-of-concept project:
<a href="https://github.com/spion/async-generators">github.com/spion/async-generators</a>.
Not a complete solution by any measure, but enough to demonstrate that its
quite possible.</p>
<p>We can even do advanced things like, say, a query optimizer that supports
aggregate execution of queries. If we replace <code>Promise.all</code> with our own
implementaiton:</p>
<pre><code class="lang-js">let blocked = yield BlockerIssues.where({blocker: blockerId})
let owners  = yield myengine.parallel(blocked.map(issue =&gt; issue.getOwner()))

for (let owner of owners) yield owner.notifyResolved(issue)
</code></pre>
<p>Instead of yielding raw SQL, we can have <code>getOwner()</code> return data about the
query:</p>
<pre><code class="lang-js">{table: &#39;users&#39;, id: issue.user_id}
</code></pre>
<p>and have myengine optimize the execution of parallel queries:</p>
<pre><code class="lang-js">if (isParallelQuery(query)) {
    var results = _(query.items).groupBy(&#39;table&#39;)
      .map((items, t) =&gt; db.query(`select * from ${t} where id in ?`,
                                  items.map(it =&gt; it.id))
                .execWithin(options.tx)).toArray();
    Promise.all(results).then(results =&gt; results.sort(byRequestOrder(queries)))
        .then(runNext)
}
</code></pre>
<p>And voila, we&#39;ve just implemented a query optimizer. We can do this on the
client too, to build a single GraphQL query by aggregating multiple ones. We
can easily add support for regular promises too, fully replacing <code>Promise.all</code>.
We can add support for iterators. which would let the optimization become deep:
we would be able to aggregate queries that are several layers within other
generator functions, without those functions knowing anything about it (thus,
without breaking modularity).</p>
<p>Generators are JavaScript&#39;s programmable semicolons (well, not as powerful as
monads, but they go quite far). Lets not take away that power by taking away
the programmability. Lets drop async await and write our own interpreters.</p>
]]></description>
            <link>https://spion.github.io/posts/es7-async-await-step-in-the-wrong-direction.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/es7-async-await-step-in-the-wrong-direction.html</guid>
            <pubDate>Sun, 23 Aug 2015 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Closures are unavoidable in node]]></title>
            <description><![CDATA[<p>A couple of weeks ago I wrote a <a href="/posts/analysis-generators-and-other-async-patterns-node.html">giant comparison of node.js async code
patterns</a> that
mostly focuses on the new generators feature in EcmaScript 6 (Harmony)</p>
<p>Among other implementations there were two callback versions: <a href="//github.com/spion/async-compare/blob/blog/examples/original.js">original.js</a>,
which contains nested callbacks, and <a href="//github.com/spion/async-compare/blob/blog/examples/flattened.js">flattened.js</a>, which flattens the nesting a
little bit. Both make extensive use of JavaScript closures: every time
the benchmarked function is invoked, a lot of closures are created.</p>
<p>Then <a href="http://blog.trevnorris.com/2013/08/long-live-callbacks.html">Trevor Norris wrote</a>
that we should be avoiding closures when writing performance-sensitive code,
hinting that my benchmark may be an example of &quot;doing it wrong&quot;</p>
<p>I decided to try and write two more flattened variants. The idea is to
minimize performance loss and memory usage by avoiding the creation of closures.</p>
<p>You can see the code here: <strong><a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class.js">flattened-class.js</a> and <a href="//github.com/spion/async-compare/blob/blog/examples/flattened-noclosure.js">flattened-noclosure.js</a></strong></p>
<p>Of course, this made complexity skyrocket. Lets see what it did for performance.</p>
<p>These are the results for 50 000 parallel invocations of the upload function,
with simulated I/O operations that always take 1ms. Note: suspend is currently
the fastest generator based library</p>
<table>
<thead>
<tr>
<th style="text-align:left">file</th>
<th style="text-align:right">time(ms)</th>
<th style="text-align:right">memory(MB)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class.js">flattened-class.js</a></td>
<td style="text-align:right">1398</td>
<td style="text-align:right">106.58</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened.js">flattened.js</a></td>
<td style="text-align:right">1453</td>
<td style="text-align:right">110.19</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened-noclosure.js">flattened-noclosure.js</a></td>
<td style="text-align:right">1574</td>
<td style="text-align:right">102.28</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/original.js">original.js</a></td>
<td style="text-align:right">1749</td>
<td style="text-align:right">124.96</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/suspend.js">suspend.js</a></td>
<td style="text-align:right">2701</td>
<td style="text-align:right">144.66</td>
</tr>
</tbody>
</table>
<p>No performance gains. Why?</p>
<p>Because this kind of code requires that results from previous callbacks are
passed to the next callback. And unfortunately, in node this means creating
closures.</p>
<p>There really is no other option. Node core functions only take callback
functions. This means we <em>have</em> to create a closure: its the only mechanism in
JS that allows you to include context together with a function.</p>
<p>And yeah, <code>bind</code> also creates a closure:</p>
<pre><code>function bind(fn, ctx) {
    return function bound() {
        return fn.apply(ctx, arguments);
    }
}
</code></pre><p>Notice how <code>bound</code> is a closure over ctx and fn.</p>
<p>Now, if node core functions were also able to take a context argument, things
could have been different. For example, instead of writing:</p>
<pre><code>fs.readFile(f, bind(this.afterFileRead, this));
</code></pre><p>if we were able to write:</p>
<pre><code>fs.readFile(f, this.afterFileRead, this);
</code></pre><p>then we would be able to write code that avoids closures and
<a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class.js">flattened-class.js</a> could have been much faster.</p>
<p>But we can&#39;t do that.</p>
<p>What if we could though? Lets fork
<a href="https://github.com/joyent/node/blob/blog/lib/timers.js">timers.js</a> from
node core and find out:</p>
<p>I added context passing support to the <code>Timeout</code> class. The result was
<a href="//github.com/spion/async-compare/blob/blog/lib/timers-ctx.js">timers-ctx.js</a>
which in turn resulted with <a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class-ctx.js">flattened-class-ctx.js</a></p>
<p>And here is how it performs:</p>
<table>
<thead>
<tr>
<th style="text-align:left">file</th>
<th style="text-align:right">time(ms)</th>
<th style="text-align:right">memory(MB)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class-ctx.js">flattened-class-ctx.js</a></td>
<td style="text-align:right">929</td>
<td style="text-align:right">59.57</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class.js">flattened-class.js</a></td>
<td style="text-align:right">1403</td>
<td style="text-align:right">106.57</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened.js">flattened.js</a></td>
<td style="text-align:right">1452</td>
<td style="text-align:right">110.19</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/original.js">original.js</a></td>
<td style="text-align:right">1743</td>
<td style="text-align:right">125.02</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/suspend.js">suspend.js</a></td>
<td style="text-align:right">2834</td>
<td style="text-align:right">145.34</td>
</tr>
</tbody>
</table>
<p>Yeah. That shaved off a couple of 100s of miliseconds more.</p>
<p>Is it worth it?</p>
<table>
<thead>
<tr>
<th style="text-align:left">name</th>
<th style="text-align:right">tokens</th>
<th style="text-align:right">complexity</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/suspend.js">suspend.js</a></td>
<td style="text-align:right">331</td>
<td style="text-align:right">1.10</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/original.js">original.js</a></td>
<td style="text-align:right">425</td>
<td style="text-align:right">1.41</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened.js">flattened.js</a></td>
<td style="text-align:right">477</td>
<td style="text-align:right">1.58</td>
</tr>
<tr>
<td style="text-align:left"><a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class-ctx.js">flattened-class-ctx.js</a></td>
<td style="text-align:right">674</td>
<td style="text-align:right">2.23</td>
</tr>
</tbody>
</table>
<p>Maybe, maybe not. You decide.</p>
]]></description>
            <link>https://spion.github.io/posts/closures-are-unavoidable-in-node.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/closures-are-unavoidable-in-node.html</guid>
            <pubDate>Fri, 23 Aug 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Fixing Hacker News: A mathematical approach]]></title>
            <description><![CDATA[<p>There is a certain phenomenon that seems to happen in almost every online
community of user-generated content. A community is created: the initial users
define the values of this new community. After a while the community experiences
growth in numbers. As a result of that growth, users that joined before it feel
like its no longer the same community with the same values. The latest widely
discussed example seems to be
<a href="http://news.ycombinator.com/item?id=4396747">Hacker News</a>.</p>
<p><a href="http://news.ycombinator.com/item?id=4397542">Paul Graham responds</a> that the
reasons are mostly: a shift in values, increase of anonymity and the fact that
its easier to vote than to contribute content:</p>
<blockquote>
<p><em>It&#39;s a genuine problem and has been growing gradually worse for a while. I think the cause is simply growth. When a good community grows, it becomes worse in two ways: (a) more recent arrivals don&#39;t have as much of whatever quality distinguished the original members, and (b) the large size of the group makes people behave worse, because there is more anonymity in a larger group.</em></p>
<p><em>I&#39;ve spent many hours over the past several years trying to understand and mitigate such problems. I&#39;ve come up with a bunch of tweaks that worked, and I have hopes I&#39;ll be able to come up with more.</em></p>
<p><em>The idea I&#39;m currently investigating, in case anyone is curious, is that
votes rather than comments may be the easiest place to attack this problem.
Although snarky comments themselves are the most obvious symptom, I suspect
that voting is on average dumber than commenting, because it requires so much
less work. So I&#39;m going to try to see if it&#39;s possible to identify people who
consistently upvote nasty comments and if so count their votes less.</em></p>
</blockquote>
<p>As online communities grow, the values of the group shift. The majority now may
or may not hold the same values as the majority before. The question is, how to
preserve the old values of the group with minimum side-effects?</p>
<p>As it happens, my master&#39;s thesis was an attempt to fix exactly this problem
mathematically and implement an improved voting system tailored specifically
for communities with user-submitted content. I won&#39;t provide a link to the
thesis as its not written in English, but I&#39;ll try to summarize the gist of it.</p>
<p>The voting system used in most communities today (democratic voting) is the one
most susceptible to value shift when significant growth occurs. Its
no surprise: democratic systems are designed to measure what the majority
values. When significant growth occurs, the majority changes and therefore what
they value also changes.</p>
<p>In contrast, previous moderator/editor based systems offer a strict filter on
content based on the more static values of the current set of editors. However,
it has the downside of being limited to what the editors are able to review and
publish.</p>
<p>I propose a hybrid feedback-loop based system. In this system people have
variable voting influence and editor-like individuals are given as a
&quot;reference point&quot; or exemplary users with maximum voting influence. The
system attempts to find out what they value and recognize it in others.</p>
<p>The system is based on the mathematics described in
<a href="http://www.unik.no/people/josang/papers/JI2002-Bled.pdf">the beta reputation system</a>,
which is a system for measuring trust in online e-commerce communities.</p>
<p>Here is a short description of the system:</p>
<ul>
<li>Voting influence is not the same for all users: its not 1 (+1 or -1) for
everyone but in the range 0-1.</li>
<li>When a user votes for a content item, they also vote for the creator (or
submitter) of the content.</li>
<li>The voting influence of a user is calculated using the positive and negative
votes that he has received for his submissions.</li>
<li>Exemplary users always have a static maximum influence.</li>
</ul>
<p>Suppose we have a content item <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span> submitted by the user <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>U</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">U_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10903em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">c</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>. Now a voter
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span></span> comes to vote for it and clicks on the +1 button.</p>
<p>The voter has his own submissions for which he has received a total amount of
positive vote <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">p_V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> and a total amount of negative vote <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">n_V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>. As a result,
his voting influence <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">i_V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> is modified: its not +1 but calculated according to
the formula:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>V</mi></msub><mo>=</mo><msub><mi>f</mi><mi>W</mi></msub><mo>(</mo><msub><mi>p</mi><mi>V</mi></msub><mo separator="true">,</mo><msub><mi>n</mi><mi>V</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">i_V = f_W(p_V, n_V) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>W</mi></msub></mrow><annotation encoding="application/x-tex">f_W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> is the
<a href="http://evanmiller.org/how-not-to-sort-by-average-rating.html">lower bound of Wilson score confidence interval</a>.
While a simple average such as:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>V</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>p</mi><mi>V</mi></msub></mrow><mrow><msub><mi>p</mi><mi>V</mi></msub><mo>+</mo><msub><mi>n</mi><mi>V</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">i_V = \frac{p_V}{p_V + n_V} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.10756em;"></span><span class="strut bottom" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.6860000000000002em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p>
<p>might work when the number of positive and negative votes is large enough, its
not good enough when the number of votes is low. The Wilson score confidence
interval gives us a better, flexible balance between desired certainty in the
result and the result itself.</p>
<p>This vote in turn is received by the content item <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span>. Because its a positive
vote, the amount of positive vote <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">p_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> is changed for this content item</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>C</mi></msub><mo>←</mo><msub><mi>p</mi><mi>C</mi></msub><mo>+</mo><msub><mi>i</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">p_C \leftarrow p_C + i_V </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">←</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p>
<p>and as a result, it has a new rating</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>c</mi></msub><mo>=</mo><msub><mi>f</mi><mi>W</mi></msub><mo>(</mo><msub><mi>p</mi><mi>c</mi></msub><mo separator="true">,</mo><msub><mi>n</mi><mi>c</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">r_c = f_W(p_c, n_c) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">c</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">c</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">c</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>but the positive points <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>U</mi></msub></mrow><annotation encoding="application/x-tex">p_U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> of the creator of the content item are also
changed:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>U</mi></msub><mo>←</mo><msub><mi>p</mi><mi>U</mi></msub><mo>+</mo><msub><mi>i</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">p_U \leftarrow p_U + i_V </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">←</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p>
<p>and as a result the voting influence <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>U</mi></msub></mrow><annotation encoding="application/x-tex">i_U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> of submitter is also changed:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>U</mi></msub><mo>=</mo><msub><mi>f</mi><mi>W</mi></msub><mo>(</mo><msub><mi>p</mi><mi>U</mi></msub><mo separator="true">,</mo><msub><mi>n</mi><mi>U</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">i_U = f_W(p_U, n_U) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">U</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>or in other words, he has &quot;earned&quot; a bigger influence in the voting system by
submitting a well-rated content item.</p>
<p>This means that new members have no voting influence. As they submit content and
receive votes their influence may rise if the existing users with high influence
in the system consider their content to be good.</p>
<p>This is where the reference users <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span> come in. Their influence is fixed to
always be 1</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>i</mi><mi>R</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i_R = 1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord">1</span></span></span></span></span></p>
<p>Because of this, influence propagates through the system from them to other
users who submit content which is deemed high-quality by the reference users.
Those users in turn also change influence by voting for others and so forth.</p>
<p>Its also possible to scale down votes as they age. The two possible strategies
are to scale all <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>X</mi></msub></mrow><annotation encoding="application/x-tex">p_X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>X</mi></msub></mrow><annotation encoding="application/x-tex">n_X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> values daily, for all content items and all
users by multiplying them with a certain aging factor <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">k_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">a</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>X</mi></msub><mo>←</mo><msub><mi>k</mi><mi>a</mi></msub><msub><mi>p</mi><mi>X</mi></msub></mrow><annotation encoding="application/x-tex">p_X \leftarrow k_a p_X </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">←</span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">a</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>X</mi></msub><mo>←</mo><msub><mi>k</mi><mi>a</mi></msub><msub><mi>n</mi><mi>X</mi></msub></mrow><annotation encoding="application/x-tex">n_X \leftarrow k_a n_X </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">←</span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">a</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p>
<p>or to simply keep all positive and negative votes <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">V_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">p</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">V_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> in the
database and recalculate <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>X</mi></msub></mrow><annotation encoding="application/x-tex">p_X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>X</mi></msub></mrow><annotation encoding="application/x-tex">n_X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> according to the age of the votes
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">a_V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>, for example:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>X</mi></msub><mo>=</mo><msub><mo>∑</mo><mrow><mi mathvariant="normal">∀</mi><msub><mi>V</mi><mi>p</mi></msub></mrow></msub><mrow><msub><mi>i</mi><mi>V</mi></msub><msubsup><mi>k</mi><mi>a</mi><mrow><msub><mi>a</mi><mi>V</mi></msub></mrow></msubsup></mrow></mrow><annotation encoding="application/x-tex">p<em>X = \sum</em>{\forall V_p} { i_V k_a^{a_V} } </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0500050000000003em;"></span><span class="strut bottom" style="height:2.5543380000000004em;vertical-align:-1.504333em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mop op-limits"><span class="vlist"><span style="top:1.2021129999999998em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">∀</span><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.07142857142857144em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">p</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.247em;margin-left:-0.03148em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">a</span></span></span><span style="top:-0.4129999999999999em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>X</mi></msub><mo>=</mo><msub><mo>∑</mo><mrow><mi mathvariant="normal">∀</mi><msub><mi>V</mi><mi>n</mi></msub></mrow></msub><mrow><msub><mi>i</mi><mi>V</mi></msub><msubsup><mi>k</mi><mi>a</mi><mrow><msub><mi>a</mi><mi>V</mi></msub></mrow></msubsup></mrow></mrow><annotation encoding="application/x-tex">n<em>X = \sum</em>{\forall V_n} { i_V k_a^{a_V} } </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.050005em;"></span><span class="strut bottom" style="height:2.4571180000000004em;vertical-align:-1.407113em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mop op-limits"><span class="vlist"><span style="top:1.202113em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord">∀</span><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.000005000000000032756em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.247em;margin-left:-0.03148em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">a</span></span></span><span style="top:-0.4129999999999999em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></span></p>
<p>One of the convenient aspects of this system is that its easy to test-drive. It
doesn&#39;t require more user action than simple democratic voting. It only requires
an administrator to specify some reference users at the start which seed and
then propagate influence throughout the system.</p>
<p>I tested this system on a forum dataset (details available on request) and found
that the system achieves around 50% reduction of difference from a moderator
only system compared to scores of a democratic system, even when the direct
voting of reference users is turned off for content items and only the indirect
(to other users) influence is counted. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>p</mi><mo>&lt;</mo><mn>0</mn><mi mathvariant="normal">.</mi><mn>0</mn><mn>5</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(p &lt; 0.05)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">p</span><span class="mrel">&lt;</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mclose">)</span></span></span></span></p>
<p>What does a 50% reduction in the difference mean? Let the score of a content
item <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span> be measured in 3 systems: democratic <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">D</span></span></span></span>, reference-users-only
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span> and hybrid <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span></span></span></span> with direct influence of reference users to content items
being turned off. By sorting the items according to those scores we can
calculate their ranks in the 3 systems: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">r_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">D</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">r_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>H</mi></msub></mrow><annotation encoding="application/x-tex">r<em>H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>
respectively. The value of the rank is in the range <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord">1</span></span></span></span> to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>
is total number of content items. The absolute difference between the democratic
ranking and the reference ranking <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>D</mi><mi>R</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d</em>{DR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> is:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>D</mi><mi>R</mi></mrow></msub><mo>=</mo><mi>a</mi><mi>b</mi><mi>s</mi><mo>(</mo><msub><mi>r</mi><mi>D</mi></msub><mo>−</mo><msub><mi>r</mi><mi>R</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">d_{DR} = abs(r_D - r_R) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">D</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>while the absolute difference between the hybrid ranking and the reference
ranking <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>H</mi><mi>R</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{HR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> is:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>H</mi><mi>R</mi></mrow></msub><mo>=</mo><mi>a</mi><mi>b</mi><mi>s</mi><mo>(</mo><msub><mi>r</mi><mi>H</mi></msub><mo>−</mo><msub><mi>r</mi><mi>R</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">d_{HR} = abs(r_H - r_R) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>and it turns out that on average,</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>H</mi><mi>R</mi></mrow></msub><mo>=</mo><mn>0</mn><mi mathvariant="normal">.</mi><mn>5</mn><msub><mi>d</mi><mrow><mi>D</mi><mi>R</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d<em>{HR} = 0.5 d</em>{DR} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p>
<p>The important downside of these results is that the people using the system were
not aware that points are calculated in a different way. The original votes were
given by people who knew that the system is democratic and acted accordingly. It
remains to be seen what the results would be if people are aware that their
voting influence depends on the way others vote for their submitted content.</p>
<p>I pondered starting a website similar to hacker news based on this voting and
scoring scheme, however starting a whole new news website is about much more
than just scoring algorithms (it requires reputation in the online comminty,
popularity and most importantly time, none of which I presently have in
sufficient amounts or know how to achieve). But hopefully, pg and the rest of
the hacker news team might find this scheme useful enough to somehow incorporate
it into the existing scoring system.</p>
]]></description>
            <link>https://spion.github.io/posts/fixing-hackernews-mathematical-approach.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/fixing-hackernews-mathematical-approach.html</guid>
            <pubDate>Tue, 21 Aug 2012 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Analysis of generators and other async patterns in node]]></title>
            <description><![CDATA[<p>Table of contents:</p>
<ul>
<li><a href="#a-gentle-introduction-to-generators">A gentle introduction to generators</a></li>
<li><a href="#the-analysis">The analysis</a></li>
<li><a href="#the-examples">The examples</a></li>
<li><a href="#complexity">Complexity</a></li>
<li><a href="#performance-time-and-memory">Performance (time and memory)</a></li>
<li><a href="#debuggability">Debuggability</a><ul>
<li><a href="#source-maps-support">Source maps support</a></li>
<li><a href="#stack-trace-accuracy">Stack trace accuracy</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<p>Async coding patterns are the subject of never-ending debates for us node.js
developers. Everyone has their own favorite method or pet library as well as
strong feelings and opinions on all the other methods and libraries. Debates
can be heated: sometimes social pariahs may be declared or grave rolling
may be induced.</p>
<p>The reason for this is that JavaScript never had any continuation
mechanism to allow code to pause and resume across the event loop boundary.</p>
<p>Until now.</p>
<p><a name="a-gentle-introduction-to-generators"></a></p>
<h3 id="a-gentle-introduction-to-generators">A gentle introduction to generators</h3>
<p><small>If you know how generators work, you can <a href="#skip">skip this</a>
    and continue to the analysis</small></p>
<p>Generators are a new feature of ES6. Normally they would be used for iteration.
Here is a generator that generates Fibonacci numbers. The example is taken from
the <a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators">ECMAScript harmony wiki</a>:</p>
<pre><code class="lang-js">function* fibonacci() {
    let [prev, curr] = [0, 1];
    for (;;) {
        [prev, curr] = [curr, prev + curr];
        yield curr;
    }
}
</code></pre>
<p>And here is how we iterate through this generator:</p>
<pre><code class="lang-js">for (n of fibonacci()) {
    // truncate the sequence at 1000
    if (n &gt; 1000) break;
    console.log(n);
}
</code></pre>
<p>What happens behind the scene?</p>
<p>Generator functions are actually constructors of iterators. The returned
iterator object has a <code>next()</code> method. We can invoke that method manually:</p>
<pre><code class="lang-js">var seq = fibonacci();
console.log(seq.next()); // 1
console.log(seq.next()); // 2 etc.
</code></pre>
<p>When <code>next</code> is invoked, it starts the execution of the generator. The generator
runs until it encounters a <code>yield</code> expression. Then it pauses and the execution
goes back to the code that called <code>next</code></p>
<p>So in a way, <code>yield</code> works similarly to <code>return</code>. But there is a big difference.
If we call <code>next</code> on the generator again, the generator will resume from the
point where it left off - from the last <code>yield</code> line.</p>
<p>In our example, the generator will resume to the top of the endless  <code>for</code> loop
and calculate the next Fibonacci pair.</p>
<p>So how would we use this to write async code?</p>
<p>A great thing about the <code>next()</code> method is that it can also send values to the
generator. Let&#39;s write a simple number generator that also collects the stuff
it receives. When it gets two things it prints them using <code>console.log</code>:</p>
<pre><code class="lang-js">function* numbers() {
    var stuffIgot = [];
    for (var k = 0; k &lt; 2; ++k) {
        var itemReceived = yield k;
        stuffIgot.push(itemReceived);
    }
    console.log(stuffIgot);
}
</code></pre>
<p>This generator gives us 3 numbers using yield. Can we give something back?</p>
<p>Let&#39;s give two things to this generator:</p>
<pre><code class="lang-js">var iterator = numbers();
// Cant give anything the first time: need to get to a yield first.
console.log(iterator.next()); // logs 0
console.log(iterator.next(&#39;present&#39;)); // logs 1
fs.readFile(&#39;file.txt&#39;, function(err, resultFromAnAsyncTask) {
    console.log(iterator.next(resultFromAnAsyncTask)); // logs 2
});
</code></pre>
<p>The generator will log the string <code>&#39;present&#39;</code> and the contents of <code>file.txt</code></p>
<p>Uh-oh.</p>
<p>Seems that we can keep the generator paused across the event loop boundary.</p>
<p>What if instead of numbers, we yielded some files to be read?</p>
<pre><code class="lang-js">function* files() {
    var results = [];
    for (var k = 0; k &lt; files.length; ++k)
        results.push(yield files[k]);
    return results;
}
</code></pre>
<p>We could process those file reading tasks asynchronously.</p>
<pre><code class="lang-js">var iterator = files();
function process(iterator, sendValue) {
    var fileTask = iterator.next(sendValue);
    fs.readFile(fileTask, function(err, res) {
        if (err) iterator.throw(err);
        else process(iterator, res);
    });
}
process(iterator);
</code></pre>
<p>But from the generator&#39;s point of view, everything seems to be happening
synchronously: it gives us the file using <code>yield</code>, then it waits to be resumed,
then it receives the contents of the file and makes a push to the results
array.</p>
<p>And there is also <code>generator.throw()</code>. It causes an exception to be thrown
from inside the generator. How cool is that?</p>
<p>With <code>next</code> and <code>throw</code> combined together, we can easily run async code. Here
is an example from one of the earliest ES6 async generators library
<a href="http://taskjs.org/">task.js</a>.</p>
<pre><code class="lang-js">spawn(function* () {
    var data = yield $.ajax(url);
    $(&#39;#result&#39;).html(data);
    var status = $(&#39;#status&#39;).html(&#39;Download complete.&#39;);
    yield status.fadeIn().promise();
    yield sleep(2000);
    status.fadeOut();
});
</code></pre>
<p>This generator yields promises, which causes it to suspend execution. The <code>spawn</code>
function that runs the generator takes those promises and waits until they&#39;re
fulfilled. Then it resumes the generator by sending it the resulting value.</p>
<p>When used in this form, generators look a lot like classical threads. You spawn
a thread, it issues blocking I/O calls using <code>yield</code>, then the code resumes
execution from the point it left off.</p>
<p>There is one very important difference though. While threads can be suspended
involuntarily at any point by the operating systems, generators have to
willingly suspend themselves using <code>yield</code>. This means that there is no danger
of variables changing under our feet, except after a <code>yield</code>.</p>
<p>Generators go a step further with this: it&#39;s impossible to suspend execution
without using the <code>yield</code> keyword. In fact, if you want to call another
generator you will have to write <code>yield* anotherGenerator(args)</code>. This means
that suspend points are always visible in the code, just like they are when
using callbacks.</p>
<p>Amazing stuff! So what does this mean? What is the reduction of code complexity?
What are the performance characteristics of code using generators? Is debugging
easy? What about environments that don&#39;t have ES6 support?</p>
<p>I decided to do a big comparison of all existing node async code patterns and
find the answers to these questions.</p>
<p><a name="skip"></a><a name="the-analysis"></a></p>
<h3 id="the-analysis">The analysis</h3>
<p>For the analysis, I took <code>file.upload</code>, a typical CRUD method extracted from
<a href="http://doxbee.com">DoxBee</a> called when uploading files. It executes multiple
queries to the database: a couple of selects, some inserts and one update.
Lots of mixed sync / async action.</p>
<p>It looks like this:</p>
<pre><code>function upload(stream, idOrPath, tag, done) {
    var blob = blobManager.create(account);
    var tx = db.begin();
    function backoff(err) {
        tx.rollback();
        return done(new Error(err));
    }
    blob.put(stream, function (err, blobId) {
        if (err) return done(err);
        self.byUuidOrPath(idOrPath).get(function (err, file) {
            if (err) return done(err);
            var previousId = file ? file.version : null;
            var version = {
                userAccountId: userAccount.id,
                date: new Date(),
                blobId: blobId,
                creatorId: userAccount.id,
                previousId: previousId
            };
            version.id = Version.createHash(version);
            Version.insert(version).execWithin(tx, function (err) {
                if (err) return backoff(err);
                if (!file) {
                    var splitPath = idOrPath.split(&#39;/&#39;);
                    var fileName = splitPath[splitPath.length - 1];
                    var newId = uuid.v1();
                    self.createQuery(idOrPath, {
                        id: newId,
                        userAccountId: userAccount.id,
                        name: fileName,
                        version: version.id
                    }, function (err, q) {
                        if (err) return backoff(err);
                        q.execWithin(tx, function (err) {
                            afterFileExists(err, newId);
                        });

                    })
                }
                else return afterFileExists(null, file.id);
            });
            function afterFileExists(err, fileId) {
                if (err) return backoff(err);
                FileVersion.insert({fileId: fileId,versionId: version.id})
                    .execWithin(tx, function (err) {
                        if (err) return backoff(err);
                        File.whereUpdate({id: fileId}, {
                            version: version.id
                        }).execWithin(tx, function (err) {
                            if (err) return backoff(err);
                            tx.commit(done);
                        });
                })
            }
        });
    });
}
</code></pre><p>Slightly pyramidal code full of callbacks.</p>
<p>This is how it looks like when written with generators:</p>
<pre><code>var genny = require(&#39;genny&#39;);
module.exports = genny.fn(function* upload(resume, stream, idOrPath, tag) {
    var blob = blobManager.create(account);
    var tx = db.begin();
    try {
        var blobId = yield blob.put(stream, resume());
        var file = yield self.byUuidOrPath(idOrPath).get(resume());
        var previousId = file ? file.version : null;
        var version = {
            userAccountId: userAccount.id,
            blobId: blobId,
            creatorId: userAccount.id,
            previousId: previousId
        };
        version.id = Version.createHash(version);
        yield Version.insert(version).execWithin(tx, resume());
        if (!file) {
            var splitPath = idOrPath.split(&#39;/&#39;);
            var fileName = splitPath[splitPath.length - 1];
            var newId = uuid.v1();
            var file = {
                id: newId,
                userAccountId: userAccount.id,
                name: fileName,
                version: version.id
            }
            var q = yield self.createQuery(idOrPath, file, resume());
            yield q.execWithin(tx, resume());
        }
        yield FileVersion.insert({fileId: file.id, versionId: version.id})
            .execWithin(tx, resume());
        yield File.whereUpdate({id: file.id}, {version: version.id})
            .execWithin(tx, resume());
        yield tx.commit(resume());
    } catch (e) {
        tx.rollback();
        throw e;
    }
});
</code></pre><p>Shorter, very straight-forward code and absolutely no nesting of callback
functions. Awesome.</p>
<p>Yet subjective adjectives are not very convincing. I want to have a measure of
complexity, a number that tells me what I&#39;m actually saving.</p>
<p>I also want to know what the performance characteristics are - how much time
and memory would it take to execute a thousand of parallel invocations of this
method? What about 2000 or 3000?</p>
<p>Also, what happens if an exception is thrown? Do I get a complete stack trace
like in the original version?</p>
<p>I also wanted to compare the results with other alternatives, such as fibers,
streamlinejs and promises (without generators).</p>
<p>So I wrote a lot of different versions of this method, and I will share my
personal impressions before giving you the results of the analysis</p>
<p><a name="the-examples"></a></p>
<h3 id="the-examples">The examples</h3>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/original.js">original.js</a></strong></p>
<p>The original solution, presented above. Vanilla callbacks. Slightly pyramidal.
I consider it acceptable, if a bit mediocre.</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/flattened.js">flattened.js</a></strong></p>
<p>Flattened variant of the original via named functions. Taking the advice from
<a href="http://callbackhell.com/">callback hell</a>, I flattened the pyramid a little
bit. As I did that, I found that while the pyramid shrunk, the code actually
grew.</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/catcher.js">catcher.js</a></strong></p>
<p>I noticed that the first two vanilla solutions had a lot of common error
handling code everywhere. So I wrote a tiny library called catcher.js which
works very much like node&#39;s <code>domain.intercept</code>. This reduced the complexity
and the number of lines further, but the pyramidal looks remained.</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/async.js">async.js</a></strong></p>
<p>Uses the waterfall function from <a href="//github.com/caolan/async">caolan&#39;s async</a>.
Very similar to flattened.js but without the need to handle errors at every
step.</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class.js">flattened-class.js</a>,
<a href="//github.com/spion/async-compare/blob/blog/examples/flattened-noclosure.js">flattened-noclosure.js</a>,
<a href="//github.com/spion/async-compare/blob/blog/examples/flattened-class-ctx.js">flattened-class-ctx.js</a></strong></p>
<p>See <a href="/posts/closures-are-unavoidable-in-node.html">this post</a> for details</p>
<p><a name="promises-failure"></a></p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples-extra/promises.js">promises.js</a></strong></p>
<p>I&#39;ll be honest. I&#39;ve never written promise code in node before. Driven by
<a href="//jeditoolkit.com/2012/04/26/code-logic-not-mechanics.html#post">Gozalla&#39;s excellent post</a>
I concluded that everything should be a promise, and things that can&#39;t handle
promises should also be rewritten.</p>
<p>Take for example this particular line in the original:</p>
<pre><code class="lang-js">var previousId = file ? file.version : null;
</code></pre>
<p>If file is a promise, we can&#39;t use the ternary operator or the property
getter. Instead we need to write two helpers: a ternary operator helper and a
property getter helper:</p>
<pre><code class="lang-js">var previousIdP = p.ternary(fileP, p.get(fileP, &#39;version&#39;), null);
</code></pre>
<p>Unfortunately this gets out of hand quickly:</p>
<pre><code>var versionP = p.allObject({
    userAccountId: userAccount.id,
    blobId: blobIdP,
    creatorId: userAccount.id,
    previousId: previousIdP,
    ...
});
versionP = p.set(versionP, p.allObject({
    id: fn.call(Version.createHash, versionP)
}));
// Even if Version.insert has been lifted to take promise arguments, it returns
// a promise and therefore we cannot call execWithinP. We have to wait for the
// promise  to resolve to invoke the function.
var versionInsert = p.eventuallyCall(
    Version.insert(versionP), &#39;execWithinP&#39;, tx);
var versionIdP = p.get(versionP, &#39;id&#39;);
</code></pre><p>So I decided to write a less aggressive version, <code>promiseish.js</code></p>
<p>note: I used <a href="//github.com/cujojs/when">when</a> because i liked its function
lifting API better than Q&#39;s</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/promiseish.js">promiseish.js</a>
and <a href="//github.com/spion/async-compare/blob/blog/examples/promiseishQ.js">promiseishQ.js</a></strong></p>
<p>Nothing fancy here, just some <code>.then()</code> chaining. In fact it feels less complex
than the <code>promise.js</code> version, where I felt like I was trying to fight the
language all the time.</p>
<p>The second file <code>promiseishQ.js</code> uses <a href="//github.com/kriskowal/q">Q</a> instead of
<a href="//github.com/cujojs/when">when</a>. No big difference there.</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/fibrous.js">fibrous.js</a></strong></p>
<p><a href="//github.com/goodeggs/fibrous">Fibrous</a> is a fibers library that creates
&quot;sync&quot; methods out of your async ones, which you can then run in a fiber.</p>
<p>So if for example you had:</p>
<pre><code>fs.readFile(file, function(err, data){ ... });
</code></pre><p>Fibrous would generate a version that returns a future, suspends the running
fiber and resumes execution when the value becomes available.</p>
<pre><code>var data = fs.sync.readFile(file);
</code></pre><p>I also needed to wrap the entire upload function:</p>
<pre><code>fibrous(function upload() { ... })
</code></pre><p>This felt very similar to the generators version above but with <code>sync</code> instead
of <code>yield</code> to indicate the methods that will yield. The one benefit I can think
of is that it feels more natural for chaining - less parenthesis are needed.</p>
<pre><code>somefn.sync(arg).split(&#39;/&#39;)
// vs
(yield somefn(arg, resume)).split(&#39;/&#39;)
</code></pre><p>Major drawback: this will never be available outside of node.js or without
native modules.</p>
<p>Library: <a href="//github.com/goodeggs/fibrous">fibrous</a></p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/suspend.js">suspend.js</a>
and <a href="//github.com/spion/async-compare/blob/blog/examples-extra/promises.js">genny.js</a></strong></p>
<p><a href="https://github.com/jmar777/suspend">suspend</a> and
<a href="http://github.com/spion/genny">genny</a> are generator-based solutions that can
work directly with node-style functions.</p>
<p>I&#39;m biased here since I wrote genny. I still think that this is objectively the
best way to use generators in node. Just replace the callback with a placeholder
generator-resuming function, then yield that. Comes back to you with the value.</p>
<p>Kudos to <a href="//github.com/jmar777">jmar777</a> for realizing that you don&#39;t need
to actually yield anything and can resume the generator using the placeholder
callback instead.</p>
<p>Both suspend and genny use generators roughly the same way. The resulting code
is very clean, very straightforward and completely devoid of callbacks.</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/qasync.js">qasync.js</a></strong></p>
<p>Q provides two methods that allow you to use generators: <code>Q.spawn</code> and
<code>Q.async</code>. In both cases the generator yields promises and in turn receives
resolved values.</p>
<p>The code didn&#39;t feel very different from genny and suspend. Its slightly less
complicated: you can yield the promise instead of placing the provided resume
function at every point where a callback is needed.</p>
<p>Caveat: as always with promises you will need to wrap all callback-based
functions.</p>
<p>Library: <a href="//github.com/kriskowal/q">Q</a></p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/co.js">co.js</a>
and <a href="//github.com/spion/async-compare/blob/blog/examples/gens.js">gens.js</a></strong></p>
<p><a href="//github.com/Raynos/gens">Gens</a> and <a href="//github.com/visionmedia/co">co</a> are
generator-based libraries. Both can work by yielding thunk-style functions:
that is, functions that take a single argument which is a node style callback
in the format <code>function (err, result)</code></p>
<p>The code looks roughly the same as qasync.js</p>
<p>The problem is, thunks still require wrapping. The recommended way to wrap node
style functions is to use <code>co.wrap</code> for co and <code>fn.bind</code> for gens - so thats
what I did.</p>
<p><strong><a href="//github.com/spion/async-compare/blob/blog/examples/src-streamline._js">streamline.js</a></strong></p>
<p>Uses <a href="http://github.com/Sage/streamlinejs">streamlinejs</a> CPS transformer and
works very much like co and qasync, except without needing to write yield
all the time.</p>
<p>Caveat: you will need to compile the file in order to use it. Also, even
though it looks like valid JavaScript, it isn&#39;t JavaScript. Superficially, it
has the same syntax, but it has very different semantics, particularly when
it comes to the <code>_</code> keyword, which acts like <code>yield</code> and <code>resume</code> combined in
one.</p>
<p>The code however is really simple and straightforward: infact it has the lowest
complexity.</p>
<p><a name="complexity"></a></p>
<h3 id="complexity">Complexity</h3>
<p>To measure complexity I took the number of tokens in the source code found by
Esprima&#39;s lexer (comments excluded). The idea is taken from
<a href="http://www.paulgraham.com/power.html">Paul Graham&#39;s essay <em>Succinctness is Power</em></a></p>
<p>I decided to allow all callback wrapping to happen in a separate file: In a
large system, the wrapped layer will probably be a small part of the code.</p>
<p>Results:</p>
<table>
<thead>
<tr>
<th style="text-align:left">name</th>
<th style="text-align:right">tokens</th>
<th style="text-align:right">complexity</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">src-streamline._js</td>
<td style="text-align:right">302</td>
<td style="text-align:right">1.00</td>
</tr>
<tr>
<td style="text-align:left">co.js</td>
<td style="text-align:right">304</td>
<td style="text-align:right">1.01</td>
</tr>
<tr>
<td style="text-align:left">qasync.js</td>
<td style="text-align:right">314</td>
<td style="text-align:right">1.04</td>
</tr>
<tr>
<td style="text-align:left">fibrous.js</td>
<td style="text-align:right">317</td>
<td style="text-align:right">1.05</td>
</tr>
<tr>
<td style="text-align:left">suspend.js</td>
<td style="text-align:right">331</td>
<td style="text-align:right">1.10</td>
</tr>
<tr>
<td style="text-align:left">genny.js</td>
<td style="text-align:right">339</td>
<td style="text-align:right">1.12</td>
</tr>
<tr>
<td style="text-align:left">gens.js</td>
<td style="text-align:right">341</td>
<td style="text-align:right">1.13</td>
</tr>
<tr>
<td style="text-align:left">catcher.js</td>
<td style="text-align:right">392</td>
<td style="text-align:right">1.30</td>
</tr>
<tr>
<td style="text-align:left">promiseishQ.js</td>
<td style="text-align:right">396</td>
<td style="text-align:right">1.31</td>
</tr>
<tr>
<td style="text-align:left">promiseish.js</td>
<td style="text-align:right">411</td>
<td style="text-align:right">1.36</td>
</tr>
<tr>
<td style="text-align:left">original.js</td>
<td style="text-align:right">421</td>
<td style="text-align:right">1.39</td>
</tr>
<tr>
<td style="text-align:left">async.js</td>
<td style="text-align:right">442</td>
<td style="text-align:right">1.46</td>
</tr>
<tr>
<td style="text-align:left">promises.js</td>
<td style="text-align:right">461</td>
<td style="text-align:right">1.53</td>
</tr>
<tr>
<td style="text-align:left">flattened.js</td>
<td style="text-align:right">473</td>
<td style="text-align:right">1.57</td>
</tr>
<tr>
<td style="text-align:left">flattened-noclosure.js</td>
<td style="text-align:right">595</td>
<td style="text-align:right">1.97</td>
</tr>
<tr>
<td style="text-align:left">flattened-class-ctx.js</td>
<td style="text-align:right">674</td>
<td style="text-align:right">2.23</td>
</tr>
<tr>
<td style="text-align:left">flattened-class.js</td>
<td style="text-align:right">718</td>
<td style="text-align:right">2.38</td>
</tr>
<tr>
<td style="text-align:left">rx.js</td>
<td style="text-align:right">935</td>
<td style="text-align:right">3.10</td>
</tr>
</tbody>
</table>
<p>Streamline and co have the lowest complexity. Fibrous, qasync, suspend, genny
and gens are roughly comparable.</p>
<p>Catcher is comparable with the normal promise solutions. Both are roughly
comparable to the original version with callbacks, but there is some
improvement as the error handling is consolidated to one place.</p>
<p>It seems that flattening the callback pyramid increases the complexity a little
bit. However, arguably the readability of the flattened version is improved.</p>
<p>Using caolan&#39;s async in this particular case doesn&#39;t seem to yield much
improvement. Its complexity however is lower than the flattened version because
it consolidates error handling.</p>
<p>Going promises-all-the-way as Gozala suggests also increases the complexity
because we&#39;re fighting the language all the time.</p>
<p>The rx.js sample is still a work in progress - it can be made much better.</p>
<p><a name="performance-time-and-memory"></a></p>
<h3 id="performance-time-and-memory-">Performance (time and memory)</h3>
<p>All external methods are mocked using <code>setTimeout</code> to simulate waiting for I/O.</p>
<p>There are two variables that control the test:</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> - the number of parallel &quot;upload requests&quot;</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span> - average wait time per async I/O operation</li>
</ul>
<p>For the first test, I set the time for every async operation to 1ms then
ran every solution for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∈</mo><mo>{</mo><mn>1</mn><mn>0</mn><mn>0</mn><mo separator="true">,</mo><mn>5</mn><mn>0</mn><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mn>5</mn><mn>0</mn><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mn>0</mn><mn>0</mn><mn>0</mn><mo>}</mo></mrow><annotation encoding="application/x-tex">n \in \lbrace 100, 500, 1000, 1500, 2000 \rbrace</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">∈</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord">1</span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">}</span></span></span></span>.</p>
<p>note: hover over the legend to highlight the item on the chart.</p>
<p><div id="perf-time-1" class="plot">
</div></p>
<script type="text/javascript">

window.perfCPUBound =
[
{ label: 'async.js',
    data:
     [ [ 100, 17 ],
       [ 500, 39 ],
       [ 1000, 65 ],
       [ 1500, 95 ],
       [ 2000, 119 ] ] },
{ label: 'catcher.js',
    data:
     [ [ 100, 17 ],
       [ 500, 29 ],
       [ 1000, 44 ],
       [ 1500, 58 ],
       [ 2000, 72 ] ] },
  { label: 'co.js',
    data:
     [ [ 100, 24 ],
       [ 500, 62 ],
       [ 1000, 96 ],
       [ 1500, 157 ],
       [ 2000, 233 ] ] },
  { label: 'dst-co-traceur.js',
    data:
     [ [ 100, 28 ],
       [ 500, 86 ],
       [ 1000, 200 ],
       [ 1500, 271 ],
       [ 2000, 324 ] ] },
  { label: 'dst-genny-traceur.js',
    data:
     [ [ 100, 25 ],
       [ 500, 76 ],
       [ 1000, 157 ],
       [ 1500, 244 ],
       [ 2000, 286 ] ] },
  { label: 'dst-qasync-traceur.js',
    data:
     [ [ 100, 112 ],
       [ 500, 510 ],
       [ 1000, 1108 ],
       [ 1500, 1713 ],
       [ 2000, 2316 ] ] },
  { label: 'dst-stratifiedjs-014.js',
    data:
     [ [ 100, 40 ],
       [ 500, 131 ],
       [ 1000, 224 ],
       [ 1500, 280 ],
       [ 2000, 433 ] ] },
  { label: 'dst-streamline.js',
    data:
     [ [ 100, 19 ],
       [ 500, 37 ],
       [ 1000, 54 ],
       [ 1500, 74 ],
       [ 2000, 97 ] ] },
  { label: 'dst-suspend-traceur.js',
    data:
     [ [ 100, 21 ],
       [ 500, 56 ],
       [ 1000, 117 ],
       [ 1500, 217 ],
       [ 2000, 263 ] ] },
  { label: 'flattened-class.js',
    data:
     [ [ 100, 16 ],
       [ 500, 29 ],
       [ 1000, 40 ],
       [ 1500, 47 ],
       [ 2000, 58 ] ] },
  { label: 'flattened.js',
    data:
     [ [ 100, 15 ],
       [ 500, 31 ],
       [ 1000, 44 ],
       [ 1500, 55 ],
       [ 2000, 64 ] ] },
  { label: 'flattened-noclosure.js',
    data:
     [ [ 100, 16 ],
       [ 500, 28 ],
       [ 1000, 42 ],
       [ 1500, 53 ],
       [ 2000, 64 ] ] },
  { label: 'genny.js',
    data:
     [ [ 100, 19 ],
       [ 500, 48 ],
       [ 1000, 79 ],
       [ 1500, 147 ],
       [ 2000, 150 ] ] },
  { label: 'gens.js',
    data:
     [ [ 100, 19 ],
       [ 500, 39 ],
       [ 1000, 63 ],
       [ 1500, 94 ],
       [ 2000, 119 ] ] },
  { label: 'original.js',
    data:
     [ [ 100, 15 ],
       [ 500, 28 ],
       [ 1000, 43 ],
       [ 1500, 56 ],
       [ 2000, 65 ] ] },
  { label: 'promiseish.js',
    data:
     [ [ 100, 97 ],
       [ 500, 463 ],
       [ 1000, 809 ],
       [ 1500, 1155 ],
       [ 2000, 1652 ] ] },
  { label: 'promiseishQ.js',
    data:
     [ [ 100, 93 ],
       [ 500, 540 ],
       [ 1000, 1145 ],
       [ 1500, 1789 ],
       [ 2000, 2287 ] ] },
  { label: 'promises.js',
    data:
     [ [ 100, 222 ],
       [ 500, 1241 ],
       [ 1000, 2284 ],
       [ 1500, 3836 ],
       [ 2000, 5861 ] ] },
  { label: 'qasync.js',
    data:
     [ [ 100, 79 ],
       [ 500, 489 ],
       [ 1000, 962 ],
       [ 1500, 1587 ],
       [ 2000, 2104 ] ] },
  { label: 'rx.js',
    data:
     [ [ 100, 37 ],
       [ 500, 147 ],
       [ 1000, 232 ],
       [ 1500, 329 ],
       [ 2000, 490 ] ] },
  { label: 'suspend.js',
    data:
     [ [ 100, 16 ],
       [ 500, 28 ],
       [ 1000, 50 ],
       [ 1500, 66 ],
       [ 2000, 83 ] ] } ]

  .concat(

[ { label: 'dst-streamline-fibers.js',
    data:
     [ [ 100, 25 ],
       [ 500, 147 ],
       [ 1000, 519 ],
       [ 1500, 1256 ],
       [ 2000, 2393 ] ] },
  { label: 'fibrous.js',
    data:
     [ [ 100, 89 ],
       [ 500, 442 ],
       [ 1000, 1159 ],
       [ 1500, 2228 ],
       [ 2000, 3755 ] ] } ]

    );

window.addEventListener('load', function() {
    $.plot('#perf-time-1', perfCPUBound, {legend: { position: 'nw' }});
});
</script>

<p>Wow. Promises seem really, really slow. Fibers are also slow, with time
complexity <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>. Everything else seems to be much faster.</p>
<p><strong>Update (Dec 20 2013)</strong>: Promises not slow anymore. PetkaAntonov wrote
Bluebird, which is faster than almost everything else and very low on
memory usage. For more info read <em><a href="/posts/why-i-am-switching-to-promises.html">Why I am switching to
Promises</a></em></p>
<p>Lets try removing all those promises and fibers to see whats down there.</p>
<p><div id="perf-time-2" class="plot">
</div></p>
<script type="text/javascript">


window.addEventListener('load', function() {
    $.plot('#perf-time-2', perfCPUBound.filter(function(item) {
        return !/(promise|qasync|fibrous|fiber)/.test(item.label)
    }), {legend: { position: 'nw' }})
});
</script>

<p>Ah, much better.</p>
<p>The original and flattened solutions are the fastest, as they use vanilla
callbacks, with the fastest flattened solution being flattened-class.js.</p>
<p>suspend is the fastest generator based solution. It incurred minimal
overhead of about 60% running time. Its also roughly comparable with
streamlinejs (when in raw callbacks mode).</p>
<p>caolan&#39;s async adds some measurable overhead (its about 2 times slower than
the original versions). Its also somewhat slower than the fastest generator
based solution.</p>
<p>genny is about 3 times slower. This is because it adds some protection
guarantees: it makes sure that callback-calling functions behave and call the
callback only once. It also provides a mechanism to enable better stack traces
when errors are encountered.</p>
<p>The slowest of the generator bunch is co, but not by much. There is nothing
intrinsically slow about it though: the slowness is probably caused by <code>co.wrap</code>
which creates a new arguments array on every invocation of the wrapped function.</p>
<p>All generator solutions become about 2 times slower when compiled with
<a href="//github.com/google/traceur-compiler/">Google Traceur</a>, an ES6 to ES5 compiler
which we need to run generators code without the <code>--harmony</code> switch or in
browsers.</p>
<p>Finally we have rx.js which is about 10 times slower than the original.</p>
<p>However, this test is a bit unrealistic.</p>
<p>Most async operations take much longer than 1 millisecond to complete,
especially when the load is as high as thousands of requests per second.
As a result, performance is I/O bound - why measure things as if it were
CPU-bound?</p>
<p>So lets make the average time needed for an async operation depend on the
number of parallel calls to <code>upload()</code>.</p>
<p>On my machine redis can be queried about 40 000 times per second; node&#39;s
&quot;hello world&quot; http server can serve up to 10 000 requests per second;
postgresql&#39;s pgbench can do 300 mixed or 15 000 select transactions per second.</p>
<p>Given all that, I decided to go with 10 000 requests per second - it looks like
a reasonable (rounded) mean.</p>
<p>Each I/O operation will take 10 ms on average when there are 100 running in
parallel and 1000 ms when there are 10 000 running in parallel. Makes much more
sense.</p>
<p><div id="perf-time-3" class="plot">
</div></p>
<script type="text/javascript">
window.perfIOBound =

[ { label: 'async.js',
    data:
     [ [ 100, 92 ],
       [ 500, 388 ],
       [ 1000, 791 ],
       [ 1500, 1155 ],
       [ 2000, 1518 ] ] },
{ label: 'catcher.js',
    data:
     [ [ 100, 78 ],
       [ 500, 351 ],
       [ 1000, 699 ],
       [ 1500, 1081 ],
       [ 2000, 1427 ] ] },
  { label: 'co.js',
    data:
     [ [ 100, 98 ],
       [ 500, 424 ],
       [ 1000, 821 ],
       [ 1500, 1222 ],
       [ 2000, 1661 ] ] },
  { label: 'dst-co-traceur.js',
    data:
     [ [ 100, 91 ],
       [ 500, 467 ],
       [ 1000, 922 ],
       [ 1500, 1347 ],
       [ 2000, 1744 ] ] },
  { label: 'dst-genny-traceur.js',
    data:
     [ [ 100, 89 ],
       [ 500, 398 ],
       [ 1000, 778 ],
       [ 1500, 1205 ],
       [ 2000, 1533 ] ] },
  { label: 'dst-qasync-traceur.js',
    data:
     [ [ 100, 113 ],
       [ 500, 495 ],
       [ 1000, 1125 ],
       [ 1500, 1757 ],
       [ 2000, 2301 ] ] },
  { label: 'dst-stratifiedjs-014.js',
    data:
     [ [ 100, 117 ],
       [ 500, 437 ],
       [ 1000, 820 ],
       [ 1500, 1216 ],
       [ 2000, 1592 ] ] },
  { label: 'dst-streamline.js',
    data:
     [ [ 100, 79 ],
       [ 500, 350 ],
       [ 1000, 699 ],
       [ 1500, 1070 ],
       [ 2000, 1444 ] ] },
  { label: 'dst-suspend-traceur.js',
    data:
     [ [ 100, 82 ],
       [ 500, 352 ],
       [ 1000, 687 ],
       [ 1500, 1038 ],
       [ 2000, 1374 ] ] },
  { label: 'flattened-class.js',
    data:
     [ [ 100, 79 ],
       [ 500, 337 ],
       [ 1000, 687 ],
       [ 1500, 1049 ],
       [ 2000, 1424 ] ] },
  { label: 'flattened.js',
    data:
     [ [ 100, 76 ],
       [ 500, 346 ],
       [ 1000, 699 ],
       [ 1500, 1059 ],
       [ 2000, 1440 ] ] },
  { label: 'flattened-noclosure.js',
    data:
     [ [ 100, 80 ],
       [ 500, 340 ],
       [ 1000, 697 ],
       [ 1500, 1060 ],
       [ 2000, 1425 ] ] },
  { label: 'genny.js',
    data:
     [ [ 100, 77 ],
       [ 500, 357 ],
       [ 1000, 723 ],
       [ 1500, 1130 ],
       [ 2000, 1521 ] ] },
  { label: 'gens.js',
    data:
     [ [ 100, 84 ],
       [ 500, 353 ],
       [ 1000, 719 ],
       [ 1500, 1100 ],
       [ 2000, 1471 ] ] },
  { label: 'original.js',
    data:
     [ [ 100, 74 ],
       [ 500, 341 ],
       [ 1000, 695 ],
       [ 1500, 1060 ],
       [ 2000, 1431 ] ] },
  { label: 'promiseish.js',
    data:
     [ [ 100, 90 ],
       [ 500, 504 ],
       [ 1000, 908 ],
       [ 1500, 1234 ],
       [ 2000, 1730 ] ] },
  { label: 'promiseishQ.js',
    data:
     [ [ 100, 94 ],
       [ 500, 565 ],
       [ 1000, 1166 ],
       [ 1500, 1778 ],
       [ 2000, 2519 ] ] },
  { label: 'promises.js',
    data:
     [ [ 100, 229 ],
       [ 500, 1233 ],
       [ 1000, 2284 ],
       [ 1500, 3860 ],
       [ 2000, 5919 ] ] },
  { label: 'qasync.js',
    data:
     [ [ 100, 88 ],
       [ 500, 487 ],
       [ 1000, 950 ],
       [ 1500, 1604 ],
       [ 2000, 2155 ] ] },
  { label: 'rx.js',
    data:
     [ [ 100, 102 ],
       [ 500, 419 ],
       [ 1000, 760 ],
       [ 1500, 1117 ],
       [ 2000, 1526 ] ] },
  { label: 'suspend.js',
    data:
     [ [ 100, 75 ],
       [ 500, 343 ],
       [ 1000, 677 ],
       [ 1500, 1032 ],
       [ 2000, 1422 ] ] } ]

.concat(
[ { label: 'dst-streamline-fibers.js',
    data:
     [ [ 100, 94 ],
       [ 500, 446 ],
       [ 1000, 925 ],
       [ 1500, 1353 ],
       [ 2000, 2348 ] ] },
  { label: 'fibrous.js',
    data:
     [ [ 100, 149 ],
       [ 500, 534 ],
       [ 1000, 1206 ],
       [ 1500, 2280 ],
       [ 2000, 4136 ] ] } ]

       );
window.addEventListener('load', function() {
    $.plot('#perf-time-3', perfIOBound, {legend: { position: 'nw' }})
});
</script>

<p><code>promises.js</code> and <code>fibrous.js</code> are still significantly slower. However all of
the other solutions are quite comparable now. Lets remove the worst two:</p>
<p><div id="perf-time-4" class="plot">
</div></p>
<script type="text/javascript">
window.addEventListener('load', function() {
    $.plot('#perf-time-4', perfIOBound.filter(function(item) {
        return !/(promises.js|fibrous.js)/.test(item.label)
    }), {legend: { position: 'nw' }});
});
</script>

<p>Everything is about the same now. Great! So in practice, you won&#39;t notice
the CPU overhead in I/O bound cases - even if you&#39;re using promises. And with
some of the generator libraries, the overhead becomes practically invisible.</p>
<p>Excellent. But what about memory usage? Lets chart that too!</p>
<p>Note: the y axis represents peak memory usage (in MB).</p>
<p><div id="perf-mem-1" class="plot">
</div></p>
<script type="text/javascript">

window.perfMEM =

[ { label: 'async.js',
    data:
     [ [ 100, 0.75 ],
       [ 500, 3.9140625 ],
       [ 1000, 7.359375 ],
       [ 1500, 10.93359375 ],
       [ 2000, 12.71875 ] ] },
{ label: 'catcher.js',
    data:
     [ [ 100, 0.91015625 ],
       [ 500, 3.34765625 ],
       [ 1000, 6.46484375 ],
       [ 1500, 9.1953125 ],
       [ 2000, 11.01171875 ] ] },
  { label: 'co.js',
    data:
     [ [ 100, 1.703125 ],
       [ 500, 6.5390625 ],
       [ 1000, 11.16796875 ],
       [ 1500, 17.43359375 ],
       [ 2000, 24.515625 ] ] },
  { label: 'dst-co-traceur.js',
    data:
     [ [ 100, 0.09765625 ],
       [ 500, 1.09765625 ],
       [ 1000, 11.08984375 ],
       [ 1500, 17.68359375 ],
       [ 2000, 22.8203125 ] ] },
  { label: 'dst-genny-traceur.js',
    data:
     [ [ 100, -0.43359375 ],
       [ 500, 1.7265625 ],
       [ 1000, 9.1484375 ],
       [ 1500, 16.30859375 ],
       [ 2000, 15.6796875 ] ] },
  { label: 'dst-qasync-traceur.js',
    data:
     [ [ 100, 10.33203125 ],
       [ 500, 59.55859375 ],
       [ 1000, 101.76953125 ],
       [ 1500, 135.78125 ],
       [ 2000, 190.25 ] ] },
  { label: 'dst-stratifiedjs-014.js',
    data:
     [ [ 100, 2.21875 ],
       [ 500, 11.32421875 ],
       [ 1000, 23.32421875 ],
       [ 1500, 38.71875 ],
       [ 2000, 48.015625 ] ] },
  { label: 'dst-streamline.js',
    data:
     [ [ 100, 1.5078125 ],
       [ 500, 3.76953125 ],
       [ 1000, 8.3359375 ],
       [ 1500, 10.25 ],
       [ 2000, 15.890625 ] ] },
  { label: 'dst-suspend-traceur.js',
    data:
     [ [ 100, -0.30078125 ],
       [ 500, 2.234375 ],
       [ 1000, 6.5390625 ],
       [ 1500, 11.125 ],
       [ 2000, 15.484375 ] ] },
  { label: 'flattened-class.js',
    data:
     [ [ 100, 0.53125 ],
       [ 500, 3.1171875 ],
       [ 1000, 4.484375 ],
       [ 1500, 7.96484375 ],
       [ 2000, 8.58984375 ] ] },
  { label: 'flattened.js',
    data:
     [ [ 100, 0.515625 ],
       [ 500, 3.25390625 ],
       [ 1000, 5.3203125 ],
       [ 1500, 8.78515625 ],
       [ 2000, 9.765625 ] ] },
  { label: 'flattened-noclosure.js',
    data:
     [ [ 100, 0.51953125 ],
       [ 500, 3.03515625 ],
       [ 1000, 4.8984375 ],
       [ 1500, 8.08203125 ],
       [ 2000, 8.87890625 ] ] },
  { label: 'genny.js',
    data:
     [ [ 100, 1.11328125 ],
       [ 500, 5.48046875 ],
       [ 1000, 11.6953125 ],
       [ 1500, 16.7890625 ],
       [ 2000, 21.2734375 ] ] },
  { label: 'gens.js',
    data:
     [ [ 100, 0.65625 ],
       [ 500, 3.91015625 ],
       [ 1000, 8.40234375 ],
       [ 1500, 11.921875 ],
       [ 2000, 15.95703125 ] ] },
  { label: 'original.js',
    data:
     [ [ 100, 0.63671875 ],
       [ 500, 3.1640625 ],
       [ 1000, 5.328125 ],
       [ 1500, 8.69921875 ],
       [ 2000, 9.54296875 ] ] },
  { label: 'promiseish.js',
    data:
     [ [ 100, 17.9140625 ],
       [ 500, 89.01171875 ],
       [ 1000, 117.94921875 ],
       [ 1500, 129.1640625 ],
       [ 2000, 231.34765625 ] ] },
  { label: 'promiseishQ.js',
    data:
     [ [ 100, 16.2421875 ],
       [ 500, 77.6953125 ],
       [ 1000, 98.296875 ],
       [ 1500, 135.9609375 ],
       [ 2000, 142.94140625 ] ] },
  { label: 'promises.js',
    data:
     [ [ 100, 42.97265625 ],
       [ 500, 121.71484375 ],
       [ 1000, 240.53515625 ],
       [ 1500, 359.94921875 ],
       [ 2000, 481.65625 ] ] },
  { label: 'qasync.js',
    data:
     [ [ 100, 11.796875 ],
       [ 500, 57.00390625 ],
       [ 1000, 97.4765625 ],
       [ 1500, 149.5078125 ],
       [ 2000, 163.91796875 ] ] },
  { label: 'rx.js',
    data:
     [ [ 100, 3.9375 ],
       [ 500, 21.34375 ],
       [ 1000, 40.43359375 ],
       [ 1500, 62.11328125 ],
       [ 2000, 62.05859375 ] ] },
  { label: 'suspend.js',
    data:
     [ [ 100, 0.71875 ],
       [ 500, 4.09375 ],
       [ 1000, 8.60546875 ],
       [ 1500, 10.1171875 ],
       [ 2000, 14.28125 ] ] } ]

  .concat(
  [ { label: 'dst-streamline-fibers.js',
    data:
     [ [ 100, 1.80078125 ],
       [ 500, 8.53125 ],
       [ 1000, 17.05859375 ],
       [ 1500, 27.98828125 ],
       [ 2000, 33.98671875 ] ] },
  { label: 'fibrous.js',
    data:
     [ [ 100, 7.05078125 ],
       [ 500, 28.5859375 ],
       [ 1000, 56.75390625 ],
       [ 1500, 84.2734375 ],
       [ 2000, 63.140625 ] ] } ]

       );

window.addEventListener('load', function() {
    $.plot('#perf-mem-1', perfMEM, {legend: { position: 'nw' },
yaxis: {min: 0}});
});
</script>

<p>Seems like promises also use a lot of memory, especially the extreme
implementation <code>promises.js</code>. <code>promiseish.js</code> as well as <code>qasync.js</code> are not
too far behind.</p>
<p><code>fibrous.js</code>, <code>rx.js</code> and <code>stratifiedjs</code> are somewhat better than the above,
however their memory usage is still over 5 times bigger than the original.</p>
<p>Lets remove the hogs and see what remains underneath.</p>
<p><div id="perf-mem-2" class="plot">
</div></p>
<script type="text/javascript">
window.addEventListener('load', function() {
    $.plot('#perf-mem-2', perfMEM.filter(function(item) {
        return !/(promises|promiseish|qasync|fibrous|rx.js|stratifiedjs)/
            .test(item.label)
    }), {legend: { position: 'nw' }, yaxis: {min: 0}});
});
</script>

<p>Streamline&#39;s fibers implementation uses 35MB while the rest use between
10MB and 25MB.</p>
<p>This is amazing. Generators (without promises) also have a low memory overhead,
even when compiled with traceur.</p>
<p>Streamline is also quite good in this category. It has very low overhead, both
in CPU and memory usage.</p>
<p>Its important to note that the testing method that I use is not statistically
sound. Its however good enough to be used to compare orders of magnitude, which
is fine considering the narrowly defined benchmark.</p>
<p>With that said, here is a table for 1000 parallel requests with 10 ms response
time for I/O operations (i.e. 100K IO / s)</p>
<table>
<thead>
<tr>
<th style="text-align:left">file</th>
<th style="text-align:right">time(ms)</th>
<th style="text-align:right">memory(MB)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">suspend.js</td>
<td style="text-align:right">101</td>
<td style="text-align:right">8.62</td>
</tr>
<tr>
<td style="text-align:left">flattened-class.js</td>
<td style="text-align:right">111</td>
<td style="text-align:right">4.48</td>
</tr>
<tr>
<td style="text-align:left">flattened-noclosure.js</td>
<td style="text-align:right">124</td>
<td style="text-align:right">5.04</td>
</tr>
<tr>
<td style="text-align:left">flattened.js</td>
<td style="text-align:right">125</td>
<td style="text-align:right">5.18</td>
</tr>
<tr>
<td style="text-align:left">original.js</td>
<td style="text-align:right">130</td>
<td style="text-align:right">5.33</td>
</tr>
<tr>
<td style="text-align:left">async.js</td>
<td style="text-align:right">135</td>
<td style="text-align:right">7.36</td>
</tr>
<tr>
<td style="text-align:left">dst-streamline.js</td>
<td style="text-align:right">139</td>
<td style="text-align:right">8.34</td>
</tr>
<tr>
<td style="text-align:left">catcher.js</td>
<td style="text-align:right">140</td>
<td style="text-align:right">6.45</td>
</tr>
<tr>
<td style="text-align:left">dst-suspend-traceur.js</td>
<td style="text-align:right">142</td>
<td style="text-align:right">6.76</td>
</tr>
<tr>
<td style="text-align:left">gens.js</td>
<td style="text-align:right">149</td>
<td style="text-align:right">8.40</td>
</tr>
<tr>
<td style="text-align:left">genny.js</td>
<td style="text-align:right">161</td>
<td style="text-align:right">11.69</td>
</tr>
<tr>
<td style="text-align:left">co.js</td>
<td style="text-align:right">182</td>
<td style="text-align:right">11.14</td>
</tr>
<tr>
<td style="text-align:left">dst-genny-traceur.js</td>
<td style="text-align:right">250</td>
<td style="text-align:right">8.84</td>
</tr>
<tr>
<td style="text-align:left">dst-stratifiedjs-014.js</td>
<td style="text-align:right">267</td>
<td style="text-align:right">23.55</td>
</tr>
<tr>
<td style="text-align:left">dst-co-traceur.js</td>
<td style="text-align:right">284</td>
<td style="text-align:right">13.54</td>
</tr>
<tr>
<td style="text-align:left">rx.js</td>
<td style="text-align:right">295</td>
<td style="text-align:right">40.43</td>
</tr>
<tr>
<td style="text-align:left">dst-streamline-fibers.js</td>
<td style="text-align:right">526</td>
<td style="text-align:right">17.05</td>
</tr>
<tr>
<td style="text-align:left">promiseish.js</td>
<td style="text-align:right">825</td>
<td style="text-align:right">117.88</td>
</tr>
<tr>
<td style="text-align:left">qasync.js</td>
<td style="text-align:right">971</td>
<td style="text-align:right">98.39</td>
</tr>
<tr>
<td style="text-align:left">fibrous.js</td>
<td style="text-align:right">1159</td>
<td style="text-align:right">57.48</td>
</tr>
<tr>
<td style="text-align:left">promiseishQ.js</td>
<td style="text-align:right">1161</td>
<td style="text-align:right">96.47</td>
</tr>
<tr>
<td style="text-align:left">dst-qasync-traceur.js</td>
<td style="text-align:right">1195</td>
<td style="text-align:right">112.10</td>
</tr>
<tr>
<td style="text-align:left">promises.js</td>
<td style="text-align:right">2315</td>
<td style="text-align:right">240.39</td>
</tr>
</tbody>
</table>
<p><a name="debuggability"></a></p>
<h3 id="debuggability">Debuggability</h3>
<p>Having good performance is important. However, all the performance is worth
nothing if our code doesn&#39;t do what its supposed to. Debugging is therefore
at least as important as performance.</p>
<p>How can we measure debuggability? We can look at source maps support and
the generated stack traces.</p>
<p><a name="source-maps-support"></a></p>
<h4 id="source-maps-support">Source maps support</h4>
<p>I split this category into 5 levels:</p>
<ul>
<li><p><strong>level 1</strong>: no source maps, but needs them (wacky stack trace line numbers)</p>
</li>
<li><p><strong>level 2</strong>: no source maps and needs them sometimes (to view the original
code)</p>
<p>Streamline used to be in this category but now it does have source maps
support.</p>
</li>
<li><p><strong>level 3</strong>: has source maps and needs them always.</p>
<p>Nothing is in this category.</p>
</li>
<li><p><strong>level 4</strong>: has source maps and needs them sometimes</p>
<p>Generator libraries are in this category. When compiled with traceur (e.g.
for the browser) source maps are required and needed. If ES6 is available,
source maps are unnecessary.</p>
<p>Streamline is also in this category for another reason. With streamline,
you don&#39;t need source maps to get accurate stack traces. However, you will
need them if you want to read the original code (e.g. when debugging in
the browser).</p>
</li>
<li><p><strong>level 5</strong>: doesn&#39;t need source maps</p>
<p>Everything else is in this category. That&#39;s a bit unfair as fibers will never
work in a browser.</p>
</li>
</ul>
<p><a name="stack-trace-accuracy"></a></p>
<h4 id="stack-trace-accuracy">Stack trace accuracy</h4>
<p>This category also has 5 levels:</p>
<ul>
<li><p><strong>level 1</strong>: stack traces are missing</p>
<p><code>suspend</code>, <code>co</code> and <code>gens</code> are in this category. When an error happens in one
of the async functions, this is how the result looks like:</p>
<pre><code>Error: Error happened
  at null._onTimeout (/home/spion/Documents/tests/async-compare/lib/fakes.js:27:27)
  at Timer.listOnTimeout [as ontimeout] (timers.js:105:15)
</code></pre><p>No mention of the original file, <code>examples/suspend.js</code></p>
<p>Unfortunately, if you throw an error to a generator using
<code>iterator.throw(error)</code>, the last yield point will not be present in the
resulting stack trace. This means you will have no idea which line in your
generator is the offending one.</p>
<p>Regular exceptions that are not thrown using <code>iterator.throw</code> have complete
stack traces, so only yield points will suffer.</p>
<p>Some solutions that aren&#39;t generator based are also in this category, namely
<code>promiseish.js</code> and <code>async.js</code>. When a library handles errors for you, the
callback stack trace will not be preserved unless special care is taken to
preserve it. <code>async</code> and <code>when</code> don&#39;t do that.</p>
</li>
<li><p><strong>level 2</strong>: stack traces are correct with native modules</p>
<p>Bruno Jouhier&#39;s generator based solution <a href="//github.com/bjouhier/galaxy">galaxy</a>
is in this category. It has a native companion module called
<a href="//github.com/bjouhier/galaxy-stack">galaxy-stack</a> that implements long stack
traces without a performance penalty.</p>
<p>Note that galaxy-stack doesn&#39;t work with node v0.11.5</p>
</li>
<li><p><strong>level 3</strong>: stack traces are correct with a flag (adding a performance
penalty).</p>
<p>All Q-based solutions are here, even <code>qasync.js</code>, which uses generators. Q&#39;s
support for stack traces via <code>Q.longStackSupport = true;</code> is good:</p>
<pre><code>Error: Error happened
    at null._onTimeout (/home/spion/Documents/tests/async-compare/lib/fakes.js:27:27)
    at Timer.listOnTimeout [as ontimeout] (timers.js:105:15)
From previous event:
    at /home/spion/Documents/tests/async-compare/examples/qasync.js:41:18
    at GeneratorFunctionPrototype.next (native)
</code></pre><p>So, does this mean that its possible to add long stack traces support to a
callbacks-based generator library the way that Q does it?</p>
<p>Yes it does! Genny is in this category too:</p>
<pre><code>Error: Error happened
    at null._onTimeout (/home/spion/Documents/tests/async-compare/lib/fakes.js:27:27)
    at Timer.listOnTimeout [as ontimeout] (timers.js:105:15)
From generator:
    at upload (/home/spion/Documents/tests/async-compare/examples/genny.js:38:35)
</code></pre><p>However it incurs about 50-70% memory overhead and is about 6 times slower.</p>
<p>Catcher is also in this category, with 100% memory overhead and about
10 times slower.</p>
</li>
<li><p><strong>level 4</strong>: stack traces are correct but fragile</p>
<p>All the raw-callback solutions are in this category: original, flattened,
flattened-class, etc. At the moment, rx.js is in this category too.</p>
<p>As long as the callback functions are defined by your code everything will
be fine. However, the moment you introduce some wrapper that handles the
errors for you, your stack traces will break and will show functions from the
wrapper library instead.</p>
</li>
<li><p><strong>level 5</strong>: stack traces are always correct</p>
<p>Streamline and fibers are in this category. Streamline compiles the file in a
way that preserves line numbers, making stack traces correct in all cases.
Fibers also preserve the full call stack.</p>
</li>
</ul>
<p>Ah yes. A table.</p>
<table>
<thead>
<tr>
<th>name</th>
<th style="text-align:right">source maps</th>
<th style="text-align:right">stack traces</th>
<th style="text-align:right">total</th>
</tr>
</thead>
<tbody>
<tr>
<td>fibrous.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">5</td>
<td style="text-align:right">10</td>
</tr>
<tr>
<td>src-streamline._js</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right">9</td>
</tr>
<tr>
<td>original.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">4</td>
<td style="text-align:right">9</td>
</tr>
<tr>
<td>flattened*.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">4</td>
<td style="text-align:right">9</td>
</tr>
<tr>
<td>rx.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">4</td>
<td style="text-align:right">9</td>
</tr>
<tr>
<td>catcher.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
<td style="text-align:right">8</td>
</tr>
<tr>
<td>promiseishQ.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">3</td>
<td style="text-align:right">8</td>
</tr>
<tr>
<td>qasync.js</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3</td>
<td style="text-align:right">7</td>
</tr>
<tr>
<td>genny.js</td>
<td style="text-align:right">4</td>
<td style="text-align:right">3</td>
<td style="text-align:right">7</td>
</tr>
<tr>
<td>async.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">1</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>promiseish.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">1</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>promises.js</td>
<td style="text-align:right">5</td>
<td style="text-align:right">1</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>suspend.js</td>
<td style="text-align:right">4</td>
<td style="text-align:right">1</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td>gens.js</td>
<td style="text-align:right">4</td>
<td style="text-align:right">1</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td>co.js</td>
<td style="text-align:right">4</td>
<td style="text-align:right">1</td>
<td style="text-align:right">5</td>
</tr>
</tbody>
</table>
<p>Generators are not exactly great. They&#39;re doing well enough thanks to qasync
and genny.</p>
<p><a name="conclusion"></a></p>
<h3 id="conclusion">Conclusion</h3>
<p>If this analysis left you even more confused than before, you&#39;re not alone. It
seems hard to make a decision even with all the data available.</p>
<p>My opinion is biased. I love generators, and I&#39;ve been
<a href="https://code.google.com/p/v8/issues/detail?id=2355#c2">pushing</a>
<a href="https://news.ycombinator.com/item?id=5419030">pretty hard</a> to direct the
attention of V8 developers to them (maybe a bit too hard). And its obvious
from the analysis above that they have good characteristics: low code
complexity, good performance.</p>
<p>More importantly, they will eventually become a part of everyday JavaScript
with no compilation (except for older browsers) or native modules required,
and the yield keyword is in principle as good indicator of async code as
callbacks are.</p>
<p>Unfortunately, the debugging story for generators is somewhat bad, especially
because of the missing stack traces for thrown errors. Fortunately, there are
solutions and workarounds, like those implemented by genny (obtrusive, reduces
performance) and galaxy (unobtrusive, but requires native modules).</p>
<p>But there are things that cannot be measured. How will the community accept
generators? Will people find it hard to decide whether to use them or not? Will
they be frowned upon when used in code published to npm?</p>
<p>I don&#39;t have the answers to these questions. I only have hunches. But they are
generally positive. Generators will play an important role in the future of
node.</p>
<hr>
<p>Special thanks to
<a href="//github.com/Raynos">Raynos</a>,
<a href="//github.com/maxogden">maxogden</a>,
<a href="//github.com/mikeal">mikeal</a>
and <a href="//github.com/DamonOehlman">damonoehlman</a>
for their input on the draft version of this analysis.</p>
<p>Thanks to <a href="//github.com/jmar777">jmar777</a> for making suspend</p>
<script src="/scripts/jquery.flot.js"></script>
<script src="/scripts/jquery.flot.highlightSeries.js"></script>]]></description>
            <link>https://spion.github.io/posts/analysis-generators-and-other-async-patterns-node.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/analysis-generators-and-other-async-patterns-node.html</guid>
            <pubDate>Fri, 09 Aug 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Introducing npmsearch]]></title>
            <description><![CDATA[<p>Node&#39;s package manager <a href="https://npmjs.org/">npm</a> is a wonderful tool.</p>
<p>It handles dependencies and versions the right way. It requires simple, easy to write package metadata. It uses a central registry (by default) which makes installing modules easier. The central registry is <a href="http://couchdb.apache.org/">CouchDB</a> which basically makes it completely transparent and available to everyone.</p>
<p>It does many things right.</p>
<p>But it doesn&#39;t do search that well.</p>
<pre><code>9134 % npm search orm
npm http GET https://registry.npmjs.org/-
/all/since?stale=update_after&amp;amp;startkey=1353539108378
npm http 200 https://registry.npmjs.org/-
/all/since?stale=update_after&amp;amp;startkey=1353539108378

NAME                  DESCRIPTION
2csv                  A pluggable file format converter into Co...
abnf                  Augmented Backus-Naur Form (ABNF) parsing.
accounting            number, money and currency parsing/formatt..
activerecord          An ORM that supports multiple database sys..
addressit             Freeform Street Address Parser
...
[snip]
...
</code></pre><p>What just happened here?</p>
<p>Here is what happened: npm search gave us all packages that contain the substring &quot;orm&quot;. Anywhere.</p>
<p>You might argue that this works well with bigger words. Its true that results are slightly better with bigger words but they&#39;re still not sorted in any meaningful way (alphabetically sorting search results isn&#39;t very meaningful)</p>
<pre><code>9144 % npm search mysql
NAME                  DESCRIPTION
Accessor_MySQL        A MySQL database wrapper, provide ...
any-db                Database-agnostic connection pool ...
autodafe              mvc framework for node with mysql ...
connect-mysql         a MySQL session store for connect ...
connect-mysql-session A MySQL session store for node.js ...
cormo                 ORM framework for Node.js...
...
[snip]
...
</code></pre><p>Hence one of the common activities to do when researching node modules is to go to the #node.js IRC channel and ask the people there for a <strong>good</strong> library that does X.</p>
<p>I decided to make a package that helps with this, called npmsearch. Its a command-line tool that allows you to search the npm registry by keywords and it sorts the results using relevance and the number of downloads that the package has.</p>
<p>Install it using npm:</p>
<pre><code>[sudo] npm install -g npmsearch
</code></pre><p>then use it from the command line:</p>
<pre><code>9147 % npmsearch mysql
* mysql (6 15862)
     A node.js driver for mysql. It is written in JavaScript, does
     not  require compiling, and is 100% MIT licensed.
     by Felix Geisendörfer &lt;felix@debuggable.com&gt;

* mongoose (2 28197)
     Mongoose MongoDB ODM
     by Guillermo Rauch &lt;guillermo@learnboost.com&gt;
     http://github.com/LearnBoost/mongoose.git

* patio (10 174)
     Patio query engine and ORM
     by Doug Martin &lt;undefined&gt;
     git@github.com:c2fo/patio.git

* mysql-libmysqlclient (5 1019)
     Binary MySQL bindings for Node.JS
     by Oleg Efimov &lt;efimovov@gmail.com&gt;
     https://github.com/Sannis/node-mysql-libmysqlclient.git

* db-mysql (3 918)
     MySQL database bindings for Node.JS

* sql (6 51)
     sql builder
     by brianc &lt;brian.m.carlson@gmail.com&gt;
     http://github.com/brianc/node-sql.git

* sequelize (2 2715)
     Multi dialect ORM for Node.JS
     by Sascha Depold
</code></pre><p>If you want to try it out without installing it,
<a href="http://npmsearch.docucalc.com/">you can try it online</a>, or you can
<a href="https://github.com/spion/npmsearch">visit the project page on github</a></p>
<p>The implemented keyword search is non-trivial: it applies the
<a href="http://tartarus.org/martin/PorterStemmer/">Porter Stemmer</a> to the keywords and
expands the set provided by you with statistically picked commonly co-occuring
keywords. (e.g. mongo will expand to mongo mongodb)</p>
<p>Results are sorted by a combined factor which incorporates keyword relevance
and &quot;half-lifed&quot; downloads. You can control the importance of each factor in
the sorting process using command-line options - and there are many:</p>
<ul>
<li>relevance - how big of a factor should keyword relevance be, default 2</li>
<li>downloads - how big of a factor is the number of downloads, default 0.25</li>
<li>halflife  - the halflife of downloads e.g. 7 means downloads that are 7
days old lose half of their value, default 30</li>
<li>limit     - number of results to display, default 7</li>
<li>freshness - update the database if older than &quot;freshness&quot; days, default 1.5</li>
</ul>
<p>I hope this will help fellow nodesters find their next favorite modules</p>
<p>Have fun!</p>
]]></description>
            <link>https://spion.github.io/posts/introducing-npmsearch.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/introducing-npmsearch.html</guid>
            <pubDate>Tue, 27 Nov 2012 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Amateur - Lasse Gjertsen]]></title>
            <description><![CDATA[<p>Just... wow.</p>
<object width="425" height="350">
<param name="movie" value="http://youtube.com/v/JzqumbhfxRo"></param>
<embed src="http://youtube.com/v/JzqumbhfxRo" 
       type="application/x-shockwave-flash" 
       width="425" 
       height="350"></embed>
</object>]]></description>
            <link>https://spion.github.io/posts/amateur-lasse-gjertsen.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/amateur-lasse-gjertsen.html</guid>
            <pubDate>Thu, 04 Jan 2007 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Let it snow]]></title>
            <description><![CDATA[<p>I thought I&#39;d post my javascript snow one-liner. Note that it doesn&#39;t work in firefox due to the new protection mechanisms. In Chrome it does, however you will need to type in the &quot;javascript:&quot; part manually because it automatically strips it off from the pasted text</p>
<ol>
<li><p>Open a website</p>
</li>
<li><p>Delete the address from the address bar, replace it with &quot;javascript:&quot; (without the quotes)</p>
</li>
<li><p>Add this and press enter:</p>
</li>
</ol>
<pre><code>(function(){for(var c=[],d=Math.random,f=document.body.clientWidth-32,b=0;50&gt;b;
++b){c.push({c:document.createElement(&quot;div&quot;),g:{b:0,a:d()*f,f:2,e:2,d:1}});
c[b].c.innerHTML=&quot;*&quot;;var e=c[b].c.style;e.position=&quot;absolute&quot;;e[&quot;font-size&quot;]=
12+12*d()+&quot;px&quot;;e.color=&quot;rgba(255,255,255,0.75)&quot;;e[&quot;text-shadow&quot;]=&quot;0px 0px 5px #aaa&quot;;
e.zIndex=65535;document.body.appendChild(c[b].c)}setInterval(function(){for(var a,
b=0;b&lt;c.length;++b)a=c[b].g,a.d=0.1&gt;d()?!a.d:a.d,a.e=0+(1+2*d())*(a.d?1:-1),a.f=
1+2*d(),a.b+=a.f,a.a+=a.e,512&lt;a.b&amp;&amp;(a.b=0),a.a&gt;f-32&amp;&amp;(a.a=0),0&gt;a.a&amp;&amp;(a.a=f-32),
c[b].c.style.top=a.b+&quot;px&quot;,c[b].c.style.left=a.a+&quot;px&quot;},33)})();`
</code></pre><object width="640" height="360" class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://1.gvt0.com/vi/mN7LW0Y00kE/0.jpg"><param name="movie" value="http://www.youtube.com/v/mN7LW0Y00kE&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><param name="allowFullScreen" value="true" /><embed width="640" height="360"  src="http://www.youtube.com/v/mN7LW0Y00kE&fs=1&source=uds" type="application/x-shockwave-flash" allowfullscreen="true"></embed></object>

<p>:)</p>
]]></description>
            <link>https://spion.github.io/posts/let-it-snow.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/let-it-snow.html</guid>
            <pubDate>Fri, 10 Aug 2012 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Intuitive JavaScript array filtering function pt1]]></title>
            <description><![CDATA[<p>When dealing with large JSON arrays on the client side or in
<a href="http://nodejs.org/">node.js</a>, one of our tasks might be to filter
them on the client side before displaying them.
<a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter" title="Array.filter">Array.filter</a>
exists since JavaScript 1.6, however it seems kinda dry: all filters must be
functions, even some really common filters such as matching text with a regular
expression, checking if a number is within a range, checking if an enumeration
has a certain value. Consider the following:</p>
<pre><code>var testArray = [
        {name:&quot;John&quot;,  age: 40, children: 2,
            company: { name: &quot;MegaCorp&quot;, employees: 200}},
        {name:&quot;Sue&quot;,   age: 30, children: 1,
            company:{ name: &quot;MegaCorp&quot;, employees: 200}},
        {name:&quot;Mary&quot;,  age: 55, children: 3,
            company:{ name: &quot;MegaCorp&quot;, employees: 200}},
        {name:&quot;Jack&quot;,  age: 20, children: 0,
            company:{ name: &quot;MiniCorp&quot;, employees: 100}}];

// Using a for loop
var filtered = [];
for (var k = 0; k &lt; testArray.length; ++k) {
    var item = testArray[k];
    if (item.age == 40 &amp;&amp; item.age == 30) filtered.push(item);
}

// Using Array.filter
testArray.filter(function(item) {
    return item.age == 40 || item.age == 30
}); // returns John
</code></pre><p>The Array.filter variant is around two times shorter than the for loop variant.
It also looks much cleaner: the anonymous function is the filter which is
called on each item to check if it should get through the filter or not. We can
call <code>Array.filter</code> with various kinds of &quot;filter functions&quot;. Should be good
enough for all uses, right?</p>
<p>Not so, at least not when you have lots of filters and you want them to be as
short as possible to write. Or if you want to combine multiple filter functions
from various sources and the items in the data array are fairly complex.</p>
<p>Lets say that we have a complex filter function for the company object and a
simple regex name filter from elsewhere and we need to combine them. We would
have to write the following:</p>
<pre><code>testArray.filter(function(item) {
    return /^J.+$/.test(item.name)
        &amp;&amp;  complexFilter(item.company); });
</code></pre><p>However, now we cannot easily replace <code>complexFilter</code> for the company with
<code>anotherComplexFilter</code>. We have to write code - to write a different anonymous
function and use it instead.</p>
<p>Now imagine having multiple different <code>complexFilters</code>. Soon enough you will
write the following function</p>
<pre><code>intiutiveFilterBeta = function(someArray, filters) {
    return someArray.filter(function(item) {
        for (var k = 0; k &lt; filters.length; ++k) {
            if (!filters[k](item)) return false;
        }
        return true;
    }
}
</code></pre><p>which will enable you to combine different complex filters into a filter array,
essentially implementing the <code>and</code> operator.</p>
<p>At about this point you will probably realize that you are missing the <code>or</code>
operator. What if you wish to filter all companies which <code>complexCompanyFilter1
or complexCompanyFilter2</code> ? If you are like me, right now you are probably
working on a DSL (domain specific language) in your head, a DSL which reminds
you of SQL. You might also start thinking that this is going a bit over the top.</p>
<p>However, if you look closely you will notice certain peculiarity about the
<code>and</code> operator: you do not really need to use <code>and</code> on two or more filters
which are working on the same field. For example, you might want to match
<code>1 or 2</code> <em>children</em>, but never both <code>1 and 2</code> <em>children</em> - it just doesnt
make sense. You might also want to have a &quot;between&quot; filter for <em>age</em>, but you
would not exactly want to <code>and</code> two between filters. Instead of <code>between 30 and
50 and between 40 and 60</code> you would simply write a <code>between 40 and 50</code> filter.</p>
<p>This observation seems to hold true for all primitive values except for strings.
That doesnt really matter because we can easily filter strings with a tool made
to do exactly that: regular expressions.</p>
<p>I decided to try and make a hopefully intuitive and readable yet still powerful
filter function based on the observations above. It should enable some common
primitive tests to be easily written without writing new functions. It should
support the AND and OR operators intuitively and without writing functions in
the most common cases. Finally, it should still enable writing custom filter
functions. I came up with this:</p>
<pre><code>function intuitiveFilter(array, filter) {
    var itemFilter = function (iFilter, item) {
        if (iFilter instanceof Function) {
            return iFilter(item);
        }
        else if (iFilter instanceof Array) {
            for (var k = 0; k &lt; iFilter.length; ++k) {
                if (itemFilter(iFilter[k], item)) return true;
            }
            return false;
        }
        else if (typeof(item) == &#39;string&#39; &amp;&amp; iFilter
            &amp;&amp; iFilter.test &amp;&amp; iFilter.exec) {
            return iFilter.test(item);
        }
        else if (item === item + 0 &amp;&amp; iFilter
            &amp;&amp; (iFilter.lt || iFilter.gt || iFilter.le
            || iFilter.ge)) {
            // item is number and filter contains min-max
            return ((!(&quot;lt&quot; in iFilter) || item &lt;  iFilter.lt)
                &amp;&amp;  (!(&quot;gt&quot; in iFilter) || item &gt;  iFilter.gt)
                &amp;&amp;  (!(&quot;le&quot; in iFilter) || item &lt;= iFilter.le)
                &amp;&amp;  (!(&quot;ge&quot; in iFilter) || item &gt;= iFilter.ge));
        }
        else if (typeof (iFilter) === &quot;object&quot;) {
            for (var key in iFilter) {
                if (!itemFilter(iFilter[key], item[key]))
                    return false;
            }
            return true;
        }
        return (iFilter == item);
    };
    var filtered = [];
    for (var k = 0; k &lt; array.length; ++k) {
        if (itemFilter(filter, array[k]))
            filtered.push(array[k]);
    }
    return filtered;
}
</code></pre><p>And here are some neat ways to use it:</p>
<pre><code>var testArray = [
        {name:&quot;John&quot;,  age: 40, children: 2,
            company:{ name: &quot;MegaCorp&quot;, employees: 200}},
        {name:&quot;Sue&quot;,   age: 30, children: 1,
            company:{ name: &quot;MegaCorp&quot;, employees: 200}},
        {name:&quot;Mary&quot;,  age: 55, children: 3,
            company:{ name: &quot;MegaCorp&quot;, employees: 200}},
        {name:&quot;Jack&quot;,  age: 20, children: 0,
            company:{ name: &quot;MiniCorp&quot;, employees: 100}}
];

console.log(intuitiveFilter(testArray,
    {name:/J.+/, age: {lt: 30}})); // Jack, but not John
console.log(intuitiveFilter(testArray,
    {age: [{gt: 15, le: 20}, {gt: 50}]})); // Jack and Mary
console.log(intuitiveFilter(testArray,
    {children: [0,1]})); // Jack, Sue

console.log(intuitiveFilter(testArray,
    {company: {name: &quot;MegaCorp&quot;}})) // all except Jack
console.log(intuitiveFilter(testArray,
    {age: function(a) { return a % 10 == 0 }})); // all except Mary
console.log(intuitiveFilter(testArray,
    [{age: 30 }, {company:{name:&quot;MiniCorp&quot;}}])); // Sue and Jack
</code></pre><p>The function is designed to make most filters look like a part of an item from
the array that is being filtered. The examples demonstrate some possible uses.</p>
<p>In the first example-set, the first one is a classic <strong>and</strong> operator with a
regex and a numeric operator for age. The second example showcases the simple
numeric support. The third example is the purest form of the <strong>or</strong> operator on
the number of children. Similar filters could easily be written for the string
name with regular expressions, for example: <code>{name:[/M.+/, /S.+/]}</code>. Isnt that
concise and lovely?</p>
<p>In the second set, the example <code>{company: {name: &quot;MegaCorp&quot;}}</code> showcases the
ability of the filter to go deeper in the object. The second example shows the
ability of the filter to use custom functions anywhere. The last example
demonstrates the ability to use the <strong>or</strong> operator on filters which work on
different fields.</p>
<p>The function would&#39;ve been perfect if it wasn&#39;t for a caveat: it cannot check
into arrays the same way it can check into an object. For example, if we had
the following data:</p>
<pre><code>var arrayArray = [{name:&quot;John&quot;,  age: 40,
    children: [{name:&quot;Joe&quot;, age:12}, {name:&quot;Jane&quot;, age:10}],
    company:{ name: &quot;MiniCorp&quot;, employees: 100}}]
</code></pre><p>we wouldn&#39;t have a way to test the contents of the sub-array <em>children</em> without
writing a function:</p>
<pre><code>intuitiveFilter(arrayArray, {children: function(arr) {
    return childrenArrayFilter(arr, {age:{gt:10}}).length &gt; 0; }
});
</code></pre><p>This caveat isnt hard to fix. However, I have decided that I will leave it
unfixed for now: let the fix be an exercise for the reader. If this code
generates some interest I will supply my fix later. The fix can even be added
without modifying the original function.</p>
]]></description>
            <link>https://spion.github.io/posts/intuitive-javascript-array-filtering-function.html</link>
            <guid isPermaLink="true">https://spion.github.io/posts/intuitive-javascript-array-filtering-function.html</guid>
            <pubDate>Sat, 07 Jul 2012 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>